/*
OceanBase Cloud API

API Documentation for OceanBase Cloud

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package obcloudsdk

import (
	"encoding/json"
)

// checks if the CreateUserResponseDtoV2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateUserResponseDtoV2{}

// CreateUserResponseDtoV2 struct for CreateUserResponseDtoV2
type CreateUserResponseDtoV2 struct {
	UserName *string `json:"userName,omitempty"`
	UserType *string `json:"userType,omitempty"`
	UserStatus *string `json:"userStatus,omitempty"`
	Description *string `json:"description,omitempty"`
	Roles []map[string]interface{} `json:"roles,omitempty"`
}

// NewCreateUserResponseDtoV2 instantiates a new CreateUserResponseDtoV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateUserResponseDtoV2() *CreateUserResponseDtoV2 {
	this := CreateUserResponseDtoV2{}
	return &this
}

// NewCreateUserResponseDtoV2WithDefaults instantiates a new CreateUserResponseDtoV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateUserResponseDtoV2WithDefaults() *CreateUserResponseDtoV2 {
	this := CreateUserResponseDtoV2{}
	return &this
}

// GetUserName returns the UserName field value if set, zero value otherwise.
func (o *CreateUserResponseDtoV2) GetUserName() string {
	if o == nil || IsNil(o.UserName) {
		var ret string
		return ret
	}
	return *o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUserResponseDtoV2) GetUserNameOk() (*string, bool) {
	if o == nil || IsNil(o.UserName) {
		return nil, false
	}
	return o.UserName, true
}

// HasUserName returns a boolean if a field has been set.
func (o *CreateUserResponseDtoV2) HasUserName() bool {
	if o != nil && !IsNil(o.UserName) {
		return true
	}

	return false
}

// SetUserName gets a reference to the given string and assigns it to the UserName field.
func (o *CreateUserResponseDtoV2) SetUserName(v string) {
	o.UserName = &v
}

// GetUserType returns the UserType field value if set, zero value otherwise.
func (o *CreateUserResponseDtoV2) GetUserType() string {
	if o == nil || IsNil(o.UserType) {
		var ret string
		return ret
	}
	return *o.UserType
}

// GetUserTypeOk returns a tuple with the UserType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUserResponseDtoV2) GetUserTypeOk() (*string, bool) {
	if o == nil || IsNil(o.UserType) {
		return nil, false
	}
	return o.UserType, true
}

// HasUserType returns a boolean if a field has been set.
func (o *CreateUserResponseDtoV2) HasUserType() bool {
	if o != nil && !IsNil(o.UserType) {
		return true
	}

	return false
}

// SetUserType gets a reference to the given string and assigns it to the UserType field.
func (o *CreateUserResponseDtoV2) SetUserType(v string) {
	o.UserType = &v
}

// GetUserStatus returns the UserStatus field value if set, zero value otherwise.
func (o *CreateUserResponseDtoV2) GetUserStatus() string {
	if o == nil || IsNil(o.UserStatus) {
		var ret string
		return ret
	}
	return *o.UserStatus
}

// GetUserStatusOk returns a tuple with the UserStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUserResponseDtoV2) GetUserStatusOk() (*string, bool) {
	if o == nil || IsNil(o.UserStatus) {
		return nil, false
	}
	return o.UserStatus, true
}

// HasUserStatus returns a boolean if a field has been set.
func (o *CreateUserResponseDtoV2) HasUserStatus() bool {
	if o != nil && !IsNil(o.UserStatus) {
		return true
	}

	return false
}

// SetUserStatus gets a reference to the given string and assigns it to the UserStatus field.
func (o *CreateUserResponseDtoV2) SetUserStatus(v string) {
	o.UserStatus = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CreateUserResponseDtoV2) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUserResponseDtoV2) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CreateUserResponseDtoV2) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CreateUserResponseDtoV2) SetDescription(v string) {
	o.Description = &v
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *CreateUserResponseDtoV2) GetRoles() []map[string]interface{} {
	if o == nil || IsNil(o.Roles) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUserResponseDtoV2) GetRolesOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Roles) {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *CreateUserResponseDtoV2) HasRoles() bool {
	if o != nil && !IsNil(o.Roles) {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []map[string]interface{} and assigns it to the Roles field.
func (o *CreateUserResponseDtoV2) SetRoles(v []map[string]interface{}) {
	o.Roles = v
}

func (o CreateUserResponseDtoV2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateUserResponseDtoV2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UserName) {
		toSerialize["userName"] = o.UserName
	}
	if !IsNil(o.UserType) {
		toSerialize["userType"] = o.UserType
	}
	if !IsNil(o.UserStatus) {
		toSerialize["userStatus"] = o.UserStatus
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Roles) {
		toSerialize["roles"] = o.Roles
	}
	return toSerialize, nil
}

type NullableCreateUserResponseDtoV2 struct {
	value *CreateUserResponseDtoV2
	isSet bool
}

func (v NullableCreateUserResponseDtoV2) Get() *CreateUserResponseDtoV2 {
	return v.value
}

func (v *NullableCreateUserResponseDtoV2) Set(val *CreateUserResponseDtoV2) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateUserResponseDtoV2) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateUserResponseDtoV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateUserResponseDtoV2(val *CreateUserResponseDtoV2) *NullableCreateUserResponseDtoV2 {
	return &NullableCreateUserResponseDtoV2{value: val, isSet: true}
}

func (v NullableCreateUserResponseDtoV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateUserResponseDtoV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


