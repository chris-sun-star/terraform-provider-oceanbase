/*
OceanBase Cloud API

API Documentation for OceanBase Cloud

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package obcloudsdk

import (
	"encoding/json"
)

// checks if the DescribeDatabasesResponseV2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DescribeDatabasesResponseV2{}

// DescribeDatabasesResponseV2 struct for DescribeDatabasesResponseV2
type DescribeDatabasesResponseV2 struct {
	TenantId *string `json:"tenantId,omitempty"`
	DatabaseName *string `json:"databaseName,omitempty"`
	GmtCreate *string `json:"gmtCreate,omitempty"`
	Encoding *string `json:"encoding,omitempty"`
	Status *string `json:"status,omitempty"`
	Users []OcpUserRoleDo `json:"users,omitempty"`
	Description *string `json:"description,omitempty"`
	RequiredSize *float64 `json:"requiredSize,omitempty"`
	Tables []TableInfoDo `json:"tables,omitempty"`
	Collation *string `json:"collation,omitempty"`
	DbType *string `json:"dbType,omitempty"`
}

// NewDescribeDatabasesResponseV2 instantiates a new DescribeDatabasesResponseV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDescribeDatabasesResponseV2() *DescribeDatabasesResponseV2 {
	this := DescribeDatabasesResponseV2{}
	return &this
}

// NewDescribeDatabasesResponseV2WithDefaults instantiates a new DescribeDatabasesResponseV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDescribeDatabasesResponseV2WithDefaults() *DescribeDatabasesResponseV2 {
	this := DescribeDatabasesResponseV2{}
	return &this
}

// GetTenantId returns the TenantId field value if set, zero value otherwise.
func (o *DescribeDatabasesResponseV2) GetTenantId() string {
	if o == nil || IsNil(o.TenantId) {
		var ret string
		return ret
	}
	return *o.TenantId
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeDatabasesResponseV2) GetTenantIdOk() (*string, bool) {
	if o == nil || IsNil(o.TenantId) {
		return nil, false
	}
	return o.TenantId, true
}

// HasTenantId returns a boolean if a field has been set.
func (o *DescribeDatabasesResponseV2) HasTenantId() bool {
	if o != nil && !IsNil(o.TenantId) {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given string and assigns it to the TenantId field.
func (o *DescribeDatabasesResponseV2) SetTenantId(v string) {
	o.TenantId = &v
}

// GetDatabaseName returns the DatabaseName field value if set, zero value otherwise.
func (o *DescribeDatabasesResponseV2) GetDatabaseName() string {
	if o == nil || IsNil(o.DatabaseName) {
		var ret string
		return ret
	}
	return *o.DatabaseName
}

// GetDatabaseNameOk returns a tuple with the DatabaseName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeDatabasesResponseV2) GetDatabaseNameOk() (*string, bool) {
	if o == nil || IsNil(o.DatabaseName) {
		return nil, false
	}
	return o.DatabaseName, true
}

// HasDatabaseName returns a boolean if a field has been set.
func (o *DescribeDatabasesResponseV2) HasDatabaseName() bool {
	if o != nil && !IsNil(o.DatabaseName) {
		return true
	}

	return false
}

// SetDatabaseName gets a reference to the given string and assigns it to the DatabaseName field.
func (o *DescribeDatabasesResponseV2) SetDatabaseName(v string) {
	o.DatabaseName = &v
}

// GetGmtCreate returns the GmtCreate field value if set, zero value otherwise.
func (o *DescribeDatabasesResponseV2) GetGmtCreate() string {
	if o == nil || IsNil(o.GmtCreate) {
		var ret string
		return ret
	}
	return *o.GmtCreate
}

// GetGmtCreateOk returns a tuple with the GmtCreate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeDatabasesResponseV2) GetGmtCreateOk() (*string, bool) {
	if o == nil || IsNil(o.GmtCreate) {
		return nil, false
	}
	return o.GmtCreate, true
}

// HasGmtCreate returns a boolean if a field has been set.
func (o *DescribeDatabasesResponseV2) HasGmtCreate() bool {
	if o != nil && !IsNil(o.GmtCreate) {
		return true
	}

	return false
}

// SetGmtCreate gets a reference to the given string and assigns it to the GmtCreate field.
func (o *DescribeDatabasesResponseV2) SetGmtCreate(v string) {
	o.GmtCreate = &v
}

// GetEncoding returns the Encoding field value if set, zero value otherwise.
func (o *DescribeDatabasesResponseV2) GetEncoding() string {
	if o == nil || IsNil(o.Encoding) {
		var ret string
		return ret
	}
	return *o.Encoding
}

// GetEncodingOk returns a tuple with the Encoding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeDatabasesResponseV2) GetEncodingOk() (*string, bool) {
	if o == nil || IsNil(o.Encoding) {
		return nil, false
	}
	return o.Encoding, true
}

// HasEncoding returns a boolean if a field has been set.
func (o *DescribeDatabasesResponseV2) HasEncoding() bool {
	if o != nil && !IsNil(o.Encoding) {
		return true
	}

	return false
}

// SetEncoding gets a reference to the given string and assigns it to the Encoding field.
func (o *DescribeDatabasesResponseV2) SetEncoding(v string) {
	o.Encoding = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *DescribeDatabasesResponseV2) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeDatabasesResponseV2) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *DescribeDatabasesResponseV2) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *DescribeDatabasesResponseV2) SetStatus(v string) {
	o.Status = &v
}

// GetUsers returns the Users field value if set, zero value otherwise.
func (o *DescribeDatabasesResponseV2) GetUsers() []OcpUserRoleDo {
	if o == nil || IsNil(o.Users) {
		var ret []OcpUserRoleDo
		return ret
	}
	return o.Users
}

// GetUsersOk returns a tuple with the Users field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeDatabasesResponseV2) GetUsersOk() ([]OcpUserRoleDo, bool) {
	if o == nil || IsNil(o.Users) {
		return nil, false
	}
	return o.Users, true
}

// HasUsers returns a boolean if a field has been set.
func (o *DescribeDatabasesResponseV2) HasUsers() bool {
	if o != nil && !IsNil(o.Users) {
		return true
	}

	return false
}

// SetUsers gets a reference to the given []OcpUserRoleDo and assigns it to the Users field.
func (o *DescribeDatabasesResponseV2) SetUsers(v []OcpUserRoleDo) {
	o.Users = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *DescribeDatabasesResponseV2) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeDatabasesResponseV2) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *DescribeDatabasesResponseV2) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *DescribeDatabasesResponseV2) SetDescription(v string) {
	o.Description = &v
}

// GetRequiredSize returns the RequiredSize field value if set, zero value otherwise.
func (o *DescribeDatabasesResponseV2) GetRequiredSize() float64 {
	if o == nil || IsNil(o.RequiredSize) {
		var ret float64
		return ret
	}
	return *o.RequiredSize
}

// GetRequiredSizeOk returns a tuple with the RequiredSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeDatabasesResponseV2) GetRequiredSizeOk() (*float64, bool) {
	if o == nil || IsNil(o.RequiredSize) {
		return nil, false
	}
	return o.RequiredSize, true
}

// HasRequiredSize returns a boolean if a field has been set.
func (o *DescribeDatabasesResponseV2) HasRequiredSize() bool {
	if o != nil && !IsNil(o.RequiredSize) {
		return true
	}

	return false
}

// SetRequiredSize gets a reference to the given float64 and assigns it to the RequiredSize field.
func (o *DescribeDatabasesResponseV2) SetRequiredSize(v float64) {
	o.RequiredSize = &v
}

// GetTables returns the Tables field value if set, zero value otherwise.
func (o *DescribeDatabasesResponseV2) GetTables() []TableInfoDo {
	if o == nil || IsNil(o.Tables) {
		var ret []TableInfoDo
		return ret
	}
	return o.Tables
}

// GetTablesOk returns a tuple with the Tables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeDatabasesResponseV2) GetTablesOk() ([]TableInfoDo, bool) {
	if o == nil || IsNil(o.Tables) {
		return nil, false
	}
	return o.Tables, true
}

// HasTables returns a boolean if a field has been set.
func (o *DescribeDatabasesResponseV2) HasTables() bool {
	if o != nil && !IsNil(o.Tables) {
		return true
	}

	return false
}

// SetTables gets a reference to the given []TableInfoDo and assigns it to the Tables field.
func (o *DescribeDatabasesResponseV2) SetTables(v []TableInfoDo) {
	o.Tables = v
}

// GetCollation returns the Collation field value if set, zero value otherwise.
func (o *DescribeDatabasesResponseV2) GetCollation() string {
	if o == nil || IsNil(o.Collation) {
		var ret string
		return ret
	}
	return *o.Collation
}

// GetCollationOk returns a tuple with the Collation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeDatabasesResponseV2) GetCollationOk() (*string, bool) {
	if o == nil || IsNil(o.Collation) {
		return nil, false
	}
	return o.Collation, true
}

// HasCollation returns a boolean if a field has been set.
func (o *DescribeDatabasesResponseV2) HasCollation() bool {
	if o != nil && !IsNil(o.Collation) {
		return true
	}

	return false
}

// SetCollation gets a reference to the given string and assigns it to the Collation field.
func (o *DescribeDatabasesResponseV2) SetCollation(v string) {
	o.Collation = &v
}

// GetDbType returns the DbType field value if set, zero value otherwise.
func (o *DescribeDatabasesResponseV2) GetDbType() string {
	if o == nil || IsNil(o.DbType) {
		var ret string
		return ret
	}
	return *o.DbType
}

// GetDbTypeOk returns a tuple with the DbType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeDatabasesResponseV2) GetDbTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DbType) {
		return nil, false
	}
	return o.DbType, true
}

// HasDbType returns a boolean if a field has been set.
func (o *DescribeDatabasesResponseV2) HasDbType() bool {
	if o != nil && !IsNil(o.DbType) {
		return true
	}

	return false
}

// SetDbType gets a reference to the given string and assigns it to the DbType field.
func (o *DescribeDatabasesResponseV2) SetDbType(v string) {
	o.DbType = &v
}

func (o DescribeDatabasesResponseV2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DescribeDatabasesResponseV2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TenantId) {
		toSerialize["tenantId"] = o.TenantId
	}
	if !IsNil(o.DatabaseName) {
		toSerialize["databaseName"] = o.DatabaseName
	}
	if !IsNil(o.GmtCreate) {
		toSerialize["gmtCreate"] = o.GmtCreate
	}
	if !IsNil(o.Encoding) {
		toSerialize["encoding"] = o.Encoding
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Users) {
		toSerialize["users"] = o.Users
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.RequiredSize) {
		toSerialize["requiredSize"] = o.RequiredSize
	}
	if !IsNil(o.Tables) {
		toSerialize["tables"] = o.Tables
	}
	if !IsNil(o.Collation) {
		toSerialize["collation"] = o.Collation
	}
	if !IsNil(o.DbType) {
		toSerialize["dbType"] = o.DbType
	}
	return toSerialize, nil
}

type NullableDescribeDatabasesResponseV2 struct {
	value *DescribeDatabasesResponseV2
	isSet bool
}

func (v NullableDescribeDatabasesResponseV2) Get() *DescribeDatabasesResponseV2 {
	return v.value
}

func (v *NullableDescribeDatabasesResponseV2) Set(val *DescribeDatabasesResponseV2) {
	v.value = val
	v.isSet = true
}

func (v NullableDescribeDatabasesResponseV2) IsSet() bool {
	return v.isSet
}

func (v *NullableDescribeDatabasesResponseV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDescribeDatabasesResponseV2(val *DescribeDatabasesResponseV2) *NullableDescribeDatabasesResponseV2 {
	return &NullableDescribeDatabasesResponseV2{value: val, isSet: true}
}

func (v NullableDescribeDatabasesResponseV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDescribeDatabasesResponseV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


