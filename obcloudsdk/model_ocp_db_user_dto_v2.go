/*
OceanBase Cloud API

API Documentation for OceanBase Cloud

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package obcloudsdk

import (
	"encoding/json"
)

// checks if the OcpDbUserDtoV2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OcpDbUserDtoV2{}

// OcpDbUserDtoV2 struct for OcpDbUserDtoV2
type OcpDbUserDtoV2 struct {
	UserName *string `json:"userName,omitempty"`
	UserType *string `json:"userType,omitempty"`
	UserStatus *string `json:"userStatus,omitempty"`
	Description *string `json:"description,omitempty"`
	Databases []OcpUserPrivilegeV2 `json:"databases,omitempty"`
	Password *string `json:"password,omitempty"`
}

// NewOcpDbUserDtoV2 instantiates a new OcpDbUserDtoV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOcpDbUserDtoV2() *OcpDbUserDtoV2 {
	this := OcpDbUserDtoV2{}
	return &this
}

// NewOcpDbUserDtoV2WithDefaults instantiates a new OcpDbUserDtoV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOcpDbUserDtoV2WithDefaults() *OcpDbUserDtoV2 {
	this := OcpDbUserDtoV2{}
	return &this
}

// GetUserName returns the UserName field value if set, zero value otherwise.
func (o *OcpDbUserDtoV2) GetUserName() string {
	if o == nil || IsNil(o.UserName) {
		var ret string
		return ret
	}
	return *o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OcpDbUserDtoV2) GetUserNameOk() (*string, bool) {
	if o == nil || IsNil(o.UserName) {
		return nil, false
	}
	return o.UserName, true
}

// HasUserName returns a boolean if a field has been set.
func (o *OcpDbUserDtoV2) HasUserName() bool {
	if o != nil && !IsNil(o.UserName) {
		return true
	}

	return false
}

// SetUserName gets a reference to the given string and assigns it to the UserName field.
func (o *OcpDbUserDtoV2) SetUserName(v string) {
	o.UserName = &v
}

// GetUserType returns the UserType field value if set, zero value otherwise.
func (o *OcpDbUserDtoV2) GetUserType() string {
	if o == nil || IsNil(o.UserType) {
		var ret string
		return ret
	}
	return *o.UserType
}

// GetUserTypeOk returns a tuple with the UserType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OcpDbUserDtoV2) GetUserTypeOk() (*string, bool) {
	if o == nil || IsNil(o.UserType) {
		return nil, false
	}
	return o.UserType, true
}

// HasUserType returns a boolean if a field has been set.
func (o *OcpDbUserDtoV2) HasUserType() bool {
	if o != nil && !IsNil(o.UserType) {
		return true
	}

	return false
}

// SetUserType gets a reference to the given string and assigns it to the UserType field.
func (o *OcpDbUserDtoV2) SetUserType(v string) {
	o.UserType = &v
}

// GetUserStatus returns the UserStatus field value if set, zero value otherwise.
func (o *OcpDbUserDtoV2) GetUserStatus() string {
	if o == nil || IsNil(o.UserStatus) {
		var ret string
		return ret
	}
	return *o.UserStatus
}

// GetUserStatusOk returns a tuple with the UserStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OcpDbUserDtoV2) GetUserStatusOk() (*string, bool) {
	if o == nil || IsNil(o.UserStatus) {
		return nil, false
	}
	return o.UserStatus, true
}

// HasUserStatus returns a boolean if a field has been set.
func (o *OcpDbUserDtoV2) HasUserStatus() bool {
	if o != nil && !IsNil(o.UserStatus) {
		return true
	}

	return false
}

// SetUserStatus gets a reference to the given string and assigns it to the UserStatus field.
func (o *OcpDbUserDtoV2) SetUserStatus(v string) {
	o.UserStatus = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *OcpDbUserDtoV2) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OcpDbUserDtoV2) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *OcpDbUserDtoV2) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *OcpDbUserDtoV2) SetDescription(v string) {
	o.Description = &v
}

// GetDatabases returns the Databases field value if set, zero value otherwise.
func (o *OcpDbUserDtoV2) GetDatabases() []OcpUserPrivilegeV2 {
	if o == nil || IsNil(o.Databases) {
		var ret []OcpUserPrivilegeV2
		return ret
	}
	return o.Databases
}

// GetDatabasesOk returns a tuple with the Databases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OcpDbUserDtoV2) GetDatabasesOk() ([]OcpUserPrivilegeV2, bool) {
	if o == nil || IsNil(o.Databases) {
		return nil, false
	}
	return o.Databases, true
}

// HasDatabases returns a boolean if a field has been set.
func (o *OcpDbUserDtoV2) HasDatabases() bool {
	if o != nil && !IsNil(o.Databases) {
		return true
	}

	return false
}

// SetDatabases gets a reference to the given []OcpUserPrivilegeV2 and assigns it to the Databases field.
func (o *OcpDbUserDtoV2) SetDatabases(v []OcpUserPrivilegeV2) {
	o.Databases = v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *OcpDbUserDtoV2) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OcpDbUserDtoV2) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *OcpDbUserDtoV2) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *OcpDbUserDtoV2) SetPassword(v string) {
	o.Password = &v
}

func (o OcpDbUserDtoV2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OcpDbUserDtoV2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UserName) {
		toSerialize["userName"] = o.UserName
	}
	if !IsNil(o.UserType) {
		toSerialize["userType"] = o.UserType
	}
	if !IsNil(o.UserStatus) {
		toSerialize["userStatus"] = o.UserStatus
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Databases) {
		toSerialize["databases"] = o.Databases
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	return toSerialize, nil
}

type NullableOcpDbUserDtoV2 struct {
	value *OcpDbUserDtoV2
	isSet bool
}

func (v NullableOcpDbUserDtoV2) Get() *OcpDbUserDtoV2 {
	return v.value
}

func (v *NullableOcpDbUserDtoV2) Set(val *OcpDbUserDtoV2) {
	v.value = val
	v.isSet = true
}

func (v NullableOcpDbUserDtoV2) IsSet() bool {
	return v.isSet
}

func (v *NullableOcpDbUserDtoV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOcpDbUserDtoV2(val *OcpDbUserDtoV2) *NullableOcpDbUserDtoV2 {
	return &NullableOcpDbUserDtoV2{value: val, isSet: true}
}

func (v NullableOcpDbUserDtoV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOcpDbUserDtoV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


