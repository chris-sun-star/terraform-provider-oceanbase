/*
OceanBase Cloud API

API Documentation for OceanBase Cloud

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package obcloudsdk

import (
	"encoding/json"
)

// checks if the TableInfoDo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TableInfoDo{}

// TableInfoDo struct for TableInfoDo
type TableInfoDo struct {
	TableId *int64 `json:"tableId,omitempty"`
	TableName *string `json:"tableName,omitempty"`
	DatabaseId *int64 `json:"databaseId,omitempty"`
	DatabaseName *string `json:"databaseName,omitempty"`
	TenantOBId *int64 `json:"tenantOBId,omitempty"`
	TenantId *string `json:"tenantId,omitempty"`
	TableGroupName *string `json:"tableGroupName,omitempty"`
	ZoneList *string `json:"zoneList,omitempty"`
	ReadOnly *int32 `json:"readOnly,omitempty"`
}

// NewTableInfoDo instantiates a new TableInfoDo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTableInfoDo() *TableInfoDo {
	this := TableInfoDo{}
	return &this
}

// NewTableInfoDoWithDefaults instantiates a new TableInfoDo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTableInfoDoWithDefaults() *TableInfoDo {
	this := TableInfoDo{}
	return &this
}

// GetTableId returns the TableId field value if set, zero value otherwise.
func (o *TableInfoDo) GetTableId() int64 {
	if o == nil || IsNil(o.TableId) {
		var ret int64
		return ret
	}
	return *o.TableId
}

// GetTableIdOk returns a tuple with the TableId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableInfoDo) GetTableIdOk() (*int64, bool) {
	if o == nil || IsNil(o.TableId) {
		return nil, false
	}
	return o.TableId, true
}

// HasTableId returns a boolean if a field has been set.
func (o *TableInfoDo) HasTableId() bool {
	if o != nil && !IsNil(o.TableId) {
		return true
	}

	return false
}

// SetTableId gets a reference to the given int64 and assigns it to the TableId field.
func (o *TableInfoDo) SetTableId(v int64) {
	o.TableId = &v
}

// GetTableName returns the TableName field value if set, zero value otherwise.
func (o *TableInfoDo) GetTableName() string {
	if o == nil || IsNil(o.TableName) {
		var ret string
		return ret
	}
	return *o.TableName
}

// GetTableNameOk returns a tuple with the TableName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableInfoDo) GetTableNameOk() (*string, bool) {
	if o == nil || IsNil(o.TableName) {
		return nil, false
	}
	return o.TableName, true
}

// HasTableName returns a boolean if a field has been set.
func (o *TableInfoDo) HasTableName() bool {
	if o != nil && !IsNil(o.TableName) {
		return true
	}

	return false
}

// SetTableName gets a reference to the given string and assigns it to the TableName field.
func (o *TableInfoDo) SetTableName(v string) {
	o.TableName = &v
}

// GetDatabaseId returns the DatabaseId field value if set, zero value otherwise.
func (o *TableInfoDo) GetDatabaseId() int64 {
	if o == nil || IsNil(o.DatabaseId) {
		var ret int64
		return ret
	}
	return *o.DatabaseId
}

// GetDatabaseIdOk returns a tuple with the DatabaseId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableInfoDo) GetDatabaseIdOk() (*int64, bool) {
	if o == nil || IsNil(o.DatabaseId) {
		return nil, false
	}
	return o.DatabaseId, true
}

// HasDatabaseId returns a boolean if a field has been set.
func (o *TableInfoDo) HasDatabaseId() bool {
	if o != nil && !IsNil(o.DatabaseId) {
		return true
	}

	return false
}

// SetDatabaseId gets a reference to the given int64 and assigns it to the DatabaseId field.
func (o *TableInfoDo) SetDatabaseId(v int64) {
	o.DatabaseId = &v
}

// GetDatabaseName returns the DatabaseName field value if set, zero value otherwise.
func (o *TableInfoDo) GetDatabaseName() string {
	if o == nil || IsNil(o.DatabaseName) {
		var ret string
		return ret
	}
	return *o.DatabaseName
}

// GetDatabaseNameOk returns a tuple with the DatabaseName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableInfoDo) GetDatabaseNameOk() (*string, bool) {
	if o == nil || IsNil(o.DatabaseName) {
		return nil, false
	}
	return o.DatabaseName, true
}

// HasDatabaseName returns a boolean if a field has been set.
func (o *TableInfoDo) HasDatabaseName() bool {
	if o != nil && !IsNil(o.DatabaseName) {
		return true
	}

	return false
}

// SetDatabaseName gets a reference to the given string and assigns it to the DatabaseName field.
func (o *TableInfoDo) SetDatabaseName(v string) {
	o.DatabaseName = &v
}

// GetTenantOBId returns the TenantOBId field value if set, zero value otherwise.
func (o *TableInfoDo) GetTenantOBId() int64 {
	if o == nil || IsNil(o.TenantOBId) {
		var ret int64
		return ret
	}
	return *o.TenantOBId
}

// GetTenantOBIdOk returns a tuple with the TenantOBId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableInfoDo) GetTenantOBIdOk() (*int64, bool) {
	if o == nil || IsNil(o.TenantOBId) {
		return nil, false
	}
	return o.TenantOBId, true
}

// HasTenantOBId returns a boolean if a field has been set.
func (o *TableInfoDo) HasTenantOBId() bool {
	if o != nil && !IsNil(o.TenantOBId) {
		return true
	}

	return false
}

// SetTenantOBId gets a reference to the given int64 and assigns it to the TenantOBId field.
func (o *TableInfoDo) SetTenantOBId(v int64) {
	o.TenantOBId = &v
}

// GetTenantId returns the TenantId field value if set, zero value otherwise.
func (o *TableInfoDo) GetTenantId() string {
	if o == nil || IsNil(o.TenantId) {
		var ret string
		return ret
	}
	return *o.TenantId
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableInfoDo) GetTenantIdOk() (*string, bool) {
	if o == nil || IsNil(o.TenantId) {
		return nil, false
	}
	return o.TenantId, true
}

// HasTenantId returns a boolean if a field has been set.
func (o *TableInfoDo) HasTenantId() bool {
	if o != nil && !IsNil(o.TenantId) {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given string and assigns it to the TenantId field.
func (o *TableInfoDo) SetTenantId(v string) {
	o.TenantId = &v
}

// GetTableGroupName returns the TableGroupName field value if set, zero value otherwise.
func (o *TableInfoDo) GetTableGroupName() string {
	if o == nil || IsNil(o.TableGroupName) {
		var ret string
		return ret
	}
	return *o.TableGroupName
}

// GetTableGroupNameOk returns a tuple with the TableGroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableInfoDo) GetTableGroupNameOk() (*string, bool) {
	if o == nil || IsNil(o.TableGroupName) {
		return nil, false
	}
	return o.TableGroupName, true
}

// HasTableGroupName returns a boolean if a field has been set.
func (o *TableInfoDo) HasTableGroupName() bool {
	if o != nil && !IsNil(o.TableGroupName) {
		return true
	}

	return false
}

// SetTableGroupName gets a reference to the given string and assigns it to the TableGroupName field.
func (o *TableInfoDo) SetTableGroupName(v string) {
	o.TableGroupName = &v
}

// GetZoneList returns the ZoneList field value if set, zero value otherwise.
func (o *TableInfoDo) GetZoneList() string {
	if o == nil || IsNil(o.ZoneList) {
		var ret string
		return ret
	}
	return *o.ZoneList
}

// GetZoneListOk returns a tuple with the ZoneList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableInfoDo) GetZoneListOk() (*string, bool) {
	if o == nil || IsNil(o.ZoneList) {
		return nil, false
	}
	return o.ZoneList, true
}

// HasZoneList returns a boolean if a field has been set.
func (o *TableInfoDo) HasZoneList() bool {
	if o != nil && !IsNil(o.ZoneList) {
		return true
	}

	return false
}

// SetZoneList gets a reference to the given string and assigns it to the ZoneList field.
func (o *TableInfoDo) SetZoneList(v string) {
	o.ZoneList = &v
}

// GetReadOnly returns the ReadOnly field value if set, zero value otherwise.
func (o *TableInfoDo) GetReadOnly() int32 {
	if o == nil || IsNil(o.ReadOnly) {
		var ret int32
		return ret
	}
	return *o.ReadOnly
}

// GetReadOnlyOk returns a tuple with the ReadOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableInfoDo) GetReadOnlyOk() (*int32, bool) {
	if o == nil || IsNil(o.ReadOnly) {
		return nil, false
	}
	return o.ReadOnly, true
}

// HasReadOnly returns a boolean if a field has been set.
func (o *TableInfoDo) HasReadOnly() bool {
	if o != nil && !IsNil(o.ReadOnly) {
		return true
	}

	return false
}

// SetReadOnly gets a reference to the given int32 and assigns it to the ReadOnly field.
func (o *TableInfoDo) SetReadOnly(v int32) {
	o.ReadOnly = &v
}

func (o TableInfoDo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TableInfoDo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TableId) {
		toSerialize["tableId"] = o.TableId
	}
	if !IsNil(o.TableName) {
		toSerialize["tableName"] = o.TableName
	}
	if !IsNil(o.DatabaseId) {
		toSerialize["databaseId"] = o.DatabaseId
	}
	if !IsNil(o.DatabaseName) {
		toSerialize["databaseName"] = o.DatabaseName
	}
	if !IsNil(o.TenantOBId) {
		toSerialize["tenantOBId"] = o.TenantOBId
	}
	if !IsNil(o.TenantId) {
		toSerialize["tenantId"] = o.TenantId
	}
	if !IsNil(o.TableGroupName) {
		toSerialize["tableGroupName"] = o.TableGroupName
	}
	if !IsNil(o.ZoneList) {
		toSerialize["zoneList"] = o.ZoneList
	}
	if !IsNil(o.ReadOnly) {
		toSerialize["readOnly"] = o.ReadOnly
	}
	return toSerialize, nil
}

type NullableTableInfoDo struct {
	value *TableInfoDo
	isSet bool
}

func (v NullableTableInfoDo) Get() *TableInfoDo {
	return v.value
}

func (v *NullableTableInfoDo) Set(val *TableInfoDo) {
	v.value = val
	v.isSet = true
}

func (v NullableTableInfoDo) IsSet() bool {
	return v.isSet
}

func (v *NullableTableInfoDo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTableInfoDo(val *TableInfoDo) *NullableTableInfoDo {
	return &NullableTableInfoDo{value: val, isSet: true}
}

func (v NullableTableInfoDo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTableInfoDo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


