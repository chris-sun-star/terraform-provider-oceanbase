/*
OceanBase Cloud API

API Documentation for OceanBase Cloud

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package obcloudsdk

import (
	"encoding/json"
)

// checks if the CpuDoV2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CpuDoV2{}

// CpuDoV2 struct for CpuDoV2
type CpuDoV2 struct {
	TotalCpu *float64 `json:"totalCpu,omitempty"`
	UsedCpu *float64 `json:"usedCpu,omitempty"`
}

// NewCpuDoV2 instantiates a new CpuDoV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCpuDoV2() *CpuDoV2 {
	this := CpuDoV2{}
	return &this
}

// NewCpuDoV2WithDefaults instantiates a new CpuDoV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCpuDoV2WithDefaults() *CpuDoV2 {
	this := CpuDoV2{}
	return &this
}

// GetTotalCpu returns the TotalCpu field value if set, zero value otherwise.
func (o *CpuDoV2) GetTotalCpu() float64 {
	if o == nil || IsNil(o.TotalCpu) {
		var ret float64
		return ret
	}
	return *o.TotalCpu
}

// GetTotalCpuOk returns a tuple with the TotalCpu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CpuDoV2) GetTotalCpuOk() (*float64, bool) {
	if o == nil || IsNil(o.TotalCpu) {
		return nil, false
	}
	return o.TotalCpu, true
}

// HasTotalCpu returns a boolean if a field has been set.
func (o *CpuDoV2) HasTotalCpu() bool {
	if o != nil && !IsNil(o.TotalCpu) {
		return true
	}

	return false
}

// SetTotalCpu gets a reference to the given float64 and assigns it to the TotalCpu field.
func (o *CpuDoV2) SetTotalCpu(v float64) {
	o.TotalCpu = &v
}

// GetUsedCpu returns the UsedCpu field value if set, zero value otherwise.
func (o *CpuDoV2) GetUsedCpu() float64 {
	if o == nil || IsNil(o.UsedCpu) {
		var ret float64
		return ret
	}
	return *o.UsedCpu
}

// GetUsedCpuOk returns a tuple with the UsedCpu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CpuDoV2) GetUsedCpuOk() (*float64, bool) {
	if o == nil || IsNil(o.UsedCpu) {
		return nil, false
	}
	return o.UsedCpu, true
}

// HasUsedCpu returns a boolean if a field has been set.
func (o *CpuDoV2) HasUsedCpu() bool {
	if o != nil && !IsNil(o.UsedCpu) {
		return true
	}

	return false
}

// SetUsedCpu gets a reference to the given float64 and assigns it to the UsedCpu field.
func (o *CpuDoV2) SetUsedCpu(v float64) {
	o.UsedCpu = &v
}

func (o CpuDoV2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CpuDoV2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TotalCpu) {
		toSerialize["totalCpu"] = o.TotalCpu
	}
	if !IsNil(o.UsedCpu) {
		toSerialize["usedCpu"] = o.UsedCpu
	}
	return toSerialize, nil
}

type NullableCpuDoV2 struct {
	value *CpuDoV2
	isSet bool
}

func (v NullableCpuDoV2) Get() *CpuDoV2 {
	return v.value
}

func (v *NullableCpuDoV2) Set(val *CpuDoV2) {
	v.value = val
	v.isSet = true
}

func (v NullableCpuDoV2) IsSet() bool {
	return v.isSet
}

func (v *NullableCpuDoV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCpuDoV2(val *CpuDoV2) *NullableCpuDoV2 {
	return &NullableCpuDoV2{value: val, isSet: true}
}

func (v NullableCpuDoV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCpuDoV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


