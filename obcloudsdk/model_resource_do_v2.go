/*
OceanBase Cloud API

API Documentation for OceanBase Cloud

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package obcloudsdk

import (
	"encoding/json"
)

// checks if the ResourceDoV2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResourceDoV2{}

// ResourceDoV2 struct for ResourceDoV2
type ResourceDoV2 struct {
	Cpu *CpuDoV2 `json:"cpu,omitempty"`
	Memory *MemoryDoV2 `json:"memory,omitempty"`
	Disk *DiskDoV2 `json:"disk,omitempty"`
}

// NewResourceDoV2 instantiates a new ResourceDoV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceDoV2() *ResourceDoV2 {
	this := ResourceDoV2{}
	return &this
}

// NewResourceDoV2WithDefaults instantiates a new ResourceDoV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceDoV2WithDefaults() *ResourceDoV2 {
	this := ResourceDoV2{}
	return &this
}

// GetCpu returns the Cpu field value if set, zero value otherwise.
func (o *ResourceDoV2) GetCpu() CpuDoV2 {
	if o == nil || IsNil(o.Cpu) {
		var ret CpuDoV2
		return ret
	}
	return *o.Cpu
}

// GetCpuOk returns a tuple with the Cpu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceDoV2) GetCpuOk() (*CpuDoV2, bool) {
	if o == nil || IsNil(o.Cpu) {
		return nil, false
	}
	return o.Cpu, true
}

// HasCpu returns a boolean if a field has been set.
func (o *ResourceDoV2) HasCpu() bool {
	if o != nil && !IsNil(o.Cpu) {
		return true
	}

	return false
}

// SetCpu gets a reference to the given CpuDoV2 and assigns it to the Cpu field.
func (o *ResourceDoV2) SetCpu(v CpuDoV2) {
	o.Cpu = &v
}

// GetMemory returns the Memory field value if set, zero value otherwise.
func (o *ResourceDoV2) GetMemory() MemoryDoV2 {
	if o == nil || IsNil(o.Memory) {
		var ret MemoryDoV2
		return ret
	}
	return *o.Memory
}

// GetMemoryOk returns a tuple with the Memory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceDoV2) GetMemoryOk() (*MemoryDoV2, bool) {
	if o == nil || IsNil(o.Memory) {
		return nil, false
	}
	return o.Memory, true
}

// HasMemory returns a boolean if a field has been set.
func (o *ResourceDoV2) HasMemory() bool {
	if o != nil && !IsNil(o.Memory) {
		return true
	}

	return false
}

// SetMemory gets a reference to the given MemoryDoV2 and assigns it to the Memory field.
func (o *ResourceDoV2) SetMemory(v MemoryDoV2) {
	o.Memory = &v
}

// GetDisk returns the Disk field value if set, zero value otherwise.
func (o *ResourceDoV2) GetDisk() DiskDoV2 {
	if o == nil || IsNil(o.Disk) {
		var ret DiskDoV2
		return ret
	}
	return *o.Disk
}

// GetDiskOk returns a tuple with the Disk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceDoV2) GetDiskOk() (*DiskDoV2, bool) {
	if o == nil || IsNil(o.Disk) {
		return nil, false
	}
	return o.Disk, true
}

// HasDisk returns a boolean if a field has been set.
func (o *ResourceDoV2) HasDisk() bool {
	if o != nil && !IsNil(o.Disk) {
		return true
	}

	return false
}

// SetDisk gets a reference to the given DiskDoV2 and assigns it to the Disk field.
func (o *ResourceDoV2) SetDisk(v DiskDoV2) {
	o.Disk = &v
}

func (o ResourceDoV2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourceDoV2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Cpu) {
		toSerialize["cpu"] = o.Cpu
	}
	if !IsNil(o.Memory) {
		toSerialize["memory"] = o.Memory
	}
	if !IsNil(o.Disk) {
		toSerialize["disk"] = o.Disk
	}
	return toSerialize, nil
}

type NullableResourceDoV2 struct {
	value *ResourceDoV2
	isSet bool
}

func (v NullableResourceDoV2) Get() *ResourceDoV2 {
	return v.value
}

func (v *NullableResourceDoV2) Set(val *ResourceDoV2) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceDoV2) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceDoV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceDoV2(val *ResourceDoV2) *NullableResourceDoV2 {
	return &NullableResourceDoV2{value: val, isSet: true}
}

func (v NullableResourceDoV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceDoV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


