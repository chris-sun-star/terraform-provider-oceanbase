/*
OceanBase Cloud API

API Documentation for OceanBase Cloud

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package obcloudsdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// MultiCloudOpenAPIService MultiCloudOpenAPI service
type MultiCloudOpenAPIService service

type ApiAddPrivateLinkServiceUserRequest struct {
	ctx context.Context
	ApiService *MultiCloudOpenAPIService
	instanceId string
	tenantId string
	requestId *string
	body *AddTenantPlServiceUserRequest
}

func (r ApiAddPrivateLinkServiceUserRequest) RequestId(requestId string) ApiAddPrivateLinkServiceUserRequest {
	r.requestId = &requestId
	return r
}

func (r ApiAddPrivateLinkServiceUserRequest) Body(body AddTenantPlServiceUserRequest) ApiAddPrivateLinkServiceUserRequest {
	r.body = &body
	return r
}

func (r ApiAddPrivateLinkServiceUserRequest) Execute() (*OBCloudResultAddTenantPlServiceUserResponse, *http.Response, error) {
	return r.ApiService.AddPrivateLinkServiceUserExecute(r)
}

/*
AddPrivateLinkServiceUser 租户private link service增加白名单用户

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceId
 @param tenantId
 @return ApiAddPrivateLinkServiceUserRequest
*/
func (a *MultiCloudOpenAPIService) AddPrivateLinkServiceUser(ctx context.Context, instanceId string, tenantId string) ApiAddPrivateLinkServiceUserRequest {
	return ApiAddPrivateLinkServiceUserRequest{
		ApiService: a,
		ctx: ctx,
		instanceId: instanceId,
		tenantId: tenantId,
	}
}

// Execute executes the request
//  @return OBCloudResultAddTenantPlServiceUserResponse
func (a *MultiCloudOpenAPIService) AddPrivateLinkServiceUserExecute(r ApiAddPrivateLinkServiceUserRequest) (*OBCloudResultAddTenantPlServiceUserResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OBCloudResultAddTenantPlServiceUserResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MultiCloudOpenAPIService.AddPrivateLinkServiceUser")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/instances/{instanceId}/tenants/{tenantId}/privatelink/user"
	localVarPath = strings.Replace(localVarPath, "{"+"instanceId"+"}", url.PathEscape(parameterValueToString(r.instanceId, "instanceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tenantId"+"}", url.PathEscape(parameterValueToString(r.tenantId, "tenantId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.requestId == nil {
		return localVarReturnValue, nil, reportError("requestId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "requestId", r.requestId, "", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiConfirmPrivatelinkConnectionRequest struct {
	ctx context.Context
	ApiService *MultiCloudOpenAPIService
	instanceId string
	tenantId string
	requestId *string
	body *ConfirmTenantPlServiceRequest
}

func (r ApiConfirmPrivatelinkConnectionRequest) RequestId(requestId string) ApiConfirmPrivatelinkConnectionRequest {
	r.requestId = &requestId
	return r
}

func (r ApiConfirmPrivatelinkConnectionRequest) Body(body ConfirmTenantPlServiceRequest) ApiConfirmPrivatelinkConnectionRequest {
	r.body = &body
	return r
}

func (r ApiConfirmPrivatelinkConnectionRequest) Execute() (*OBCloudResultBoolean, *http.Response, error) {
	return r.ApiService.ConfirmPrivatelinkConnectionExecute(r)
}

/*
ConfirmPrivatelinkConnection 确认完成private link私网连接

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceId
 @param tenantId
 @return ApiConfirmPrivatelinkConnectionRequest
*/
func (a *MultiCloudOpenAPIService) ConfirmPrivatelinkConnection(ctx context.Context, instanceId string, tenantId string) ApiConfirmPrivatelinkConnectionRequest {
	return ApiConfirmPrivatelinkConnectionRequest{
		ApiService: a,
		ctx: ctx,
		instanceId: instanceId,
		tenantId: tenantId,
	}
}

// Execute executes the request
//  @return OBCloudResultBoolean
func (a *MultiCloudOpenAPIService) ConfirmPrivatelinkConnectionExecute(r ApiConfirmPrivatelinkConnectionRequest) (*OBCloudResultBoolean, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OBCloudResultBoolean
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MultiCloudOpenAPIService.ConfirmPrivatelinkConnection")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/instances/{instanceId}/tenants/{tenantId}/privatelink/confirmation"
	localVarPath = strings.Replace(localVarPath, "{"+"instanceId"+"}", url.PathEscape(parameterValueToString(r.instanceId, "instanceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tenantId"+"}", url.PathEscape(parameterValueToString(r.tenantId, "tenantId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.requestId == nil {
		return localVarReturnValue, nil, reportError("requestId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "requestId", r.requestId, "", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiConnectPrivateLinkServiceRequest struct {
	ctx context.Context
	ApiService *MultiCloudOpenAPIService
	instanceId string
	tenantId string
	requestId *string
	body *ConnectTenantPlServiceRequest
}

func (r ApiConnectPrivateLinkServiceRequest) RequestId(requestId string) ApiConnectPrivateLinkServiceRequest {
	r.requestId = &requestId
	return r
}

func (r ApiConnectPrivateLinkServiceRequest) Body(body ConnectTenantPlServiceRequest) ApiConnectPrivateLinkServiceRequest {
	r.body = &body
	return r
}

func (r ApiConnectPrivateLinkServiceRequest) Execute() (*OBCloudResultConnectTenantPlServiceResponse, *http.Response, error) {
	return r.ApiService.ConnectPrivateLinkServiceExecute(r)
}

/*
ConnectPrivateLinkService private link endpoint连接service

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceId
 @param tenantId
 @return ApiConnectPrivateLinkServiceRequest
*/
func (a *MultiCloudOpenAPIService) ConnectPrivateLinkService(ctx context.Context, instanceId string, tenantId string) ApiConnectPrivateLinkServiceRequest {
	return ApiConnectPrivateLinkServiceRequest{
		ApiService: a,
		ctx: ctx,
		instanceId: instanceId,
		tenantId: tenantId,
	}
}

// Execute executes the request
//  @return OBCloudResultConnectTenantPlServiceResponse
func (a *MultiCloudOpenAPIService) ConnectPrivateLinkServiceExecute(r ApiConnectPrivateLinkServiceRequest) (*OBCloudResultConnectTenantPlServiceResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OBCloudResultConnectTenantPlServiceResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MultiCloudOpenAPIService.ConnectPrivateLinkService")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/instances/{instanceId}/tenants/{tenantId}/privatelink/connection"
	localVarPath = strings.Replace(localVarPath, "{"+"instanceId"+"}", url.PathEscape(parameterValueToString(r.instanceId, "instanceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tenantId"+"}", url.PathEscape(parameterValueToString(r.tenantId, "tenantId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.requestId == nil {
		return localVarReturnValue, nil, reportError("requestId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "requestId", r.requestId, "", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateDatabaseRequest struct {
	ctx context.Context
	ApiService *MultiCloudOpenAPIService
	instanceId string
	tenantId string
	body *CreateDatabaseRequestV2
}

func (r ApiCreateDatabaseRequest) Body(body CreateDatabaseRequestV2) ApiCreateDatabaseRequest {
	r.body = &body
	return r
}

func (r ApiCreateDatabaseRequest) Execute() (*OBCloudResultMapStringString, *http.Response, error) {
	return r.ApiService.CreateDatabaseExecute(r)
}

/*
CreateDatabase CreateDatabase

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceId
 @param tenantId
 @return ApiCreateDatabaseRequest
*/
func (a *MultiCloudOpenAPIService) CreateDatabase(ctx context.Context, instanceId string, tenantId string) ApiCreateDatabaseRequest {
	return ApiCreateDatabaseRequest{
		ApiService: a,
		ctx: ctx,
		instanceId: instanceId,
		tenantId: tenantId,
	}
}

// Execute executes the request
//  @return OBCloudResultMapStringString
func (a *MultiCloudOpenAPIService) CreateDatabaseExecute(r ApiCreateDatabaseRequest) (*OBCloudResultMapStringString, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OBCloudResultMapStringString
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MultiCloudOpenAPIService.CreateDatabase")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/instances/{instanceId}/tenants/{tenantId}/databases"
	localVarPath = strings.Replace(localVarPath, "{"+"instanceId"+"}", url.PathEscape(parameterValueToString(r.instanceId, "instanceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tenantId"+"}", url.PathEscape(parameterValueToString(r.tenantId, "tenantId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateInstanceRequest struct {
	ctx context.Context
	ApiService *MultiCloudOpenAPIService
	requestId *string
	xObProjectId *string
	body *MultiCloudCreateInstanceRequest
}

func (r ApiCreateInstanceRequest) RequestId(requestId string) ApiCreateInstanceRequest {
	r.requestId = &requestId
	return r
}

func (r ApiCreateInstanceRequest) XObProjectId(xObProjectId string) ApiCreateInstanceRequest {
	r.xObProjectId = &xObProjectId
	return r
}

func (r ApiCreateInstanceRequest) Body(body MultiCloudCreateInstanceRequest) ApiCreateInstanceRequest {
	r.body = &body
	return r
}

func (r ApiCreateInstanceRequest) Execute() (*OBCloudResultCreateInstanceResponseV2OpenApi, *http.Response, error) {
	return r.ApiService.CreateInstanceExecute(r)
}

/*
CreateInstance CreateInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateInstanceRequest
*/
func (a *MultiCloudOpenAPIService) CreateInstance(ctx context.Context) ApiCreateInstanceRequest {
	return ApiCreateInstanceRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return OBCloudResultCreateInstanceResponseV2OpenApi
func (a *MultiCloudOpenAPIService) CreateInstanceExecute(r ApiCreateInstanceRequest) (*OBCloudResultCreateInstanceResponseV2OpenApi, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OBCloudResultCreateInstanceResponseV2OpenApi
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MultiCloudOpenAPIService.CreateInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/instances"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.requestId == nil {
		return localVarReturnValue, nil, reportError("requestId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "requestId", r.requestId, "", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xObProjectId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Ob-Project-Id", r.xObProjectId, "", "")
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreatePrivateLinkServiceRequest struct {
	ctx context.Context
	ApiService *MultiCloudOpenAPIService
	instanceId string
	tenantId string
	requestId *string
	body *CreateTenantPlServiceRequest
}

func (r ApiCreatePrivateLinkServiceRequest) RequestId(requestId string) ApiCreatePrivateLinkServiceRequest {
	r.requestId = &requestId
	return r
}

func (r ApiCreatePrivateLinkServiceRequest) Body(body CreateTenantPlServiceRequest) ApiCreatePrivateLinkServiceRequest {
	r.body = &body
	return r
}

func (r ApiCreatePrivateLinkServiceRequest) Execute() (*OBCloudResultCreateTenantPlServiceResponse, *http.Response, error) {
	return r.ApiService.CreatePrivateLinkServiceExecute(r)
}

/*
CreatePrivateLinkService 创建租户的private link主地址

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceId
 @param tenantId
 @return ApiCreatePrivateLinkServiceRequest
*/
func (a *MultiCloudOpenAPIService) CreatePrivateLinkService(ctx context.Context, instanceId string, tenantId string) ApiCreatePrivateLinkServiceRequest {
	return ApiCreatePrivateLinkServiceRequest{
		ApiService: a,
		ctx: ctx,
		instanceId: instanceId,
		tenantId: tenantId,
	}
}

// Execute executes the request
//  @return OBCloudResultCreateTenantPlServiceResponse
func (a *MultiCloudOpenAPIService) CreatePrivateLinkServiceExecute(r ApiCreatePrivateLinkServiceRequest) (*OBCloudResultCreateTenantPlServiceResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OBCloudResultCreateTenantPlServiceResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MultiCloudOpenAPIService.CreatePrivateLinkService")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/instances/{instanceId}/tenants/{tenantId}/privatelink/service"
	localVarPath = strings.Replace(localVarPath, "{"+"instanceId"+"}", url.PathEscape(parameterValueToString(r.instanceId, "instanceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tenantId"+"}", url.PathEscape(parameterValueToString(r.tenantId, "tenantId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.requestId == nil {
		return localVarReturnValue, nil, reportError("requestId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "requestId", r.requestId, "", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateReadonlyPrivatelinkRequest struct {
	ctx context.Context
	ApiService *MultiCloudOpenAPIService
	instanceId string
	tenantId string
	requestId *string
	body *CreateReadonlyConnectionRequest
}

func (r ApiCreateReadonlyPrivatelinkRequest) RequestId(requestId string) ApiCreateReadonlyPrivatelinkRequest {
	r.requestId = &requestId
	return r
}

func (r ApiCreateReadonlyPrivatelinkRequest) Body(body CreateReadonlyConnectionRequest) ApiCreateReadonlyPrivatelinkRequest {
	r.body = &body
	return r
}

func (r ApiCreateReadonlyPrivatelinkRequest) Execute() (*OBCloudResultCreateReadonlyConnectionResponse, *http.Response, error) {
	return r.ApiService.CreateReadonlyPrivatelinkExecute(r)
}

/*
CreateReadonlyPrivatelink 创建租户的私网只读地址

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceId
 @param tenantId
 @return ApiCreateReadonlyPrivatelinkRequest
*/
func (a *MultiCloudOpenAPIService) CreateReadonlyPrivatelink(ctx context.Context, instanceId string, tenantId string) ApiCreateReadonlyPrivatelinkRequest {
	return ApiCreateReadonlyPrivatelinkRequest{
		ApiService: a,
		ctx: ctx,
		instanceId: instanceId,
		tenantId: tenantId,
	}
}

// Execute executes the request
//  @return OBCloudResultCreateReadonlyConnectionResponse
func (a *MultiCloudOpenAPIService) CreateReadonlyPrivatelinkExecute(r ApiCreateReadonlyPrivatelinkRequest) (*OBCloudResultCreateReadonlyConnectionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OBCloudResultCreateReadonlyConnectionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MultiCloudOpenAPIService.CreateReadonlyPrivatelink")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/instances/{instanceId}/tenants/{tenantId}/privatelink/readonly"
	localVarPath = strings.Replace(localVarPath, "{"+"instanceId"+"}", url.PathEscape(parameterValueToString(r.instanceId, "instanceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tenantId"+"}", url.PathEscape(parameterValueToString(r.tenantId, "tenantId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.requestId == nil {
		return localVarReturnValue, nil, reportError("requestId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "requestId", r.requestId, "", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateTenantRequest struct {
	ctx context.Context
	ApiService *MultiCloudOpenAPIService
	instanceId string
	requestId *string
	body *CreateTenantRequest
}

func (r ApiCreateTenantRequest) RequestId(requestId string) ApiCreateTenantRequest {
	r.requestId = &requestId
	return r
}

func (r ApiCreateTenantRequest) Body(body CreateTenantRequest) ApiCreateTenantRequest {
	r.body = &body
	return r
}

func (r ApiCreateTenantRequest) Execute() (*OBCloudResultCreateTenantResponse, *http.Response, error) {
	return r.ApiService.CreateTenantExecute(r)
}

/*
CreateTenant 创建租户

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceId
 @return ApiCreateTenantRequest
*/
func (a *MultiCloudOpenAPIService) CreateTenant(ctx context.Context, instanceId string) ApiCreateTenantRequest {
	return ApiCreateTenantRequest{
		ApiService: a,
		ctx: ctx,
		instanceId: instanceId,
	}
}

// Execute executes the request
//  @return OBCloudResultCreateTenantResponse
func (a *MultiCloudOpenAPIService) CreateTenantExecute(r ApiCreateTenantRequest) (*OBCloudResultCreateTenantResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OBCloudResultCreateTenantResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MultiCloudOpenAPIService.CreateTenant")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/instances/{instanceId}/tenants"
	localVarPath = strings.Replace(localVarPath, "{"+"instanceId"+"}", url.PathEscape(parameterValueToString(r.instanceId, "instanceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.requestId == nil {
		return localVarReturnValue, nil, reportError("requestId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "requestId", r.requestId, "", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateTenantAddressRequest struct {
	ctx context.Context
	ApiService *MultiCloudOpenAPIService
	instanceId string
	tenantId string
	requestId *string
	xObProjectId *string
	body *CreateMcTenantAddressRequest
}

func (r ApiCreateTenantAddressRequest) RequestId(requestId string) ApiCreateTenantAddressRequest {
	r.requestId = &requestId
	return r
}

func (r ApiCreateTenantAddressRequest) XObProjectId(xObProjectId string) ApiCreateTenantAddressRequest {
	r.xObProjectId = &xObProjectId
	return r
}

func (r ApiCreateTenantAddressRequest) Body(body CreateMcTenantAddressRequest) ApiCreateTenantAddressRequest {
	r.body = &body
	return r
}

func (r ApiCreateTenantAddressRequest) Execute() (*OBCloudResultCreateMcTenantAddressResponse, *http.Response, error) {
	return r.ApiService.CreateTenantAddressExecute(r)
}

/*
CreateTenantAddress 新建租户singleTunnelSLB地址

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceId
 @param tenantId
 @return ApiCreateTenantAddressRequest
*/
func (a *MultiCloudOpenAPIService) CreateTenantAddress(ctx context.Context, instanceId string, tenantId string) ApiCreateTenantAddressRequest {
	return ApiCreateTenantAddressRequest{
		ApiService: a,
		ctx: ctx,
		instanceId: instanceId,
		tenantId: tenantId,
	}
}

// Execute executes the request
//  @return OBCloudResultCreateMcTenantAddressResponse
func (a *MultiCloudOpenAPIService) CreateTenantAddressExecute(r ApiCreateTenantAddressRequest) (*OBCloudResultCreateMcTenantAddressResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OBCloudResultCreateMcTenantAddressResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MultiCloudOpenAPIService.CreateTenantAddress")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/instances/{instanceId}/tenants/{tenantId}/address"
	localVarPath = strings.Replace(localVarPath, "{"+"instanceId"+"}", url.PathEscape(parameterValueToString(r.instanceId, "instanceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tenantId"+"}", url.PathEscape(parameterValueToString(r.tenantId, "tenantId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.requestId == nil {
		return localVarReturnValue, nil, reportError("requestId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "requestId", r.requestId, "", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xObProjectId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Ob-Project-Id", r.xObProjectId, "", "")
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateTenantSecurityIpGroupRequest struct {
	ctx context.Context
	ApiService *MultiCloudOpenAPIService
	instanceId string
	tenantId string
	requestId *string
	body *McModifyTenantSecurityIpGroupRequest
}

func (r ApiCreateTenantSecurityIpGroupRequest) RequestId(requestId string) ApiCreateTenantSecurityIpGroupRequest {
	r.requestId = &requestId
	return r
}

func (r ApiCreateTenantSecurityIpGroupRequest) Body(body McModifyTenantSecurityIpGroupRequest) ApiCreateTenantSecurityIpGroupRequest {
	r.body = &body
	return r
}

func (r ApiCreateTenantSecurityIpGroupRequest) Execute() (*OBCloudResultMcModifyTenantSecurityIpGroupResponse, *http.Response, error) {
	return r.ApiService.CreateTenantSecurityIpGroupExecute(r)
}

/*
CreateTenantSecurityIpGroup CreateTenantSecurityIpGroup

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceId
 @param tenantId
 @return ApiCreateTenantSecurityIpGroupRequest
*/
func (a *MultiCloudOpenAPIService) CreateTenantSecurityIpGroup(ctx context.Context, instanceId string, tenantId string) ApiCreateTenantSecurityIpGroupRequest {
	return ApiCreateTenantSecurityIpGroupRequest{
		ApiService: a,
		ctx: ctx,
		instanceId: instanceId,
		tenantId: tenantId,
	}
}

// Execute executes the request
//  @return OBCloudResultMcModifyTenantSecurityIpGroupResponse
func (a *MultiCloudOpenAPIService) CreateTenantSecurityIpGroupExecute(r ApiCreateTenantSecurityIpGroupRequest) (*OBCloudResultMcModifyTenantSecurityIpGroupResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OBCloudResultMcModifyTenantSecurityIpGroupResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MultiCloudOpenAPIService.CreateTenantSecurityIpGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/instances/{instanceId}/tenants/{tenantId}/securityIpGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"instanceId"+"}", url.PathEscape(parameterValueToString(r.instanceId, "instanceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tenantId"+"}", url.PathEscape(parameterValueToString(r.tenantId, "tenantId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.requestId == nil {
		return localVarReturnValue, nil, reportError("requestId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "requestId", r.requestId, "", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateTenantUserRequest struct {
	ctx context.Context
	ApiService *MultiCloudOpenAPIService
	instanceId string
	tenantId string
	requestId *string
	body *CreateUserParamDo
}

func (r ApiCreateTenantUserRequest) RequestId(requestId string) ApiCreateTenantUserRequest {
	r.requestId = &requestId
	return r
}

func (r ApiCreateTenantUserRequest) Body(body CreateUserParamDo) ApiCreateTenantUserRequest {
	r.body = &body
	return r
}

func (r ApiCreateTenantUserRequest) Execute() (*OBCloudResultCreateUserResponseDtoV2, *http.Response, error) {
	return r.ApiService.CreateTenantUserExecute(r)
}

/*
CreateTenantUser 创建租户内的用户

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceId
 @param tenantId
 @return ApiCreateTenantUserRequest
*/
func (a *MultiCloudOpenAPIService) CreateTenantUser(ctx context.Context, instanceId string, tenantId string) ApiCreateTenantUserRequest {
	return ApiCreateTenantUserRequest{
		ApiService: a,
		ctx: ctx,
		instanceId: instanceId,
		tenantId: tenantId,
	}
}

// Execute executes the request
//  @return OBCloudResultCreateUserResponseDtoV2
func (a *MultiCloudOpenAPIService) CreateTenantUserExecute(r ApiCreateTenantUserRequest) (*OBCloudResultCreateUserResponseDtoV2, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OBCloudResultCreateUserResponseDtoV2
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MultiCloudOpenAPIService.CreateTenantUser")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/instances/{instanceId}/tenants/{tenantId}/tenantUsers"
	localVarPath = strings.Replace(localVarPath, "{"+"instanceId"+"}", url.PathEscape(parameterValueToString(r.instanceId, "instanceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tenantId"+"}", url.PathEscape(parameterValueToString(r.tenantId, "tenantId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.requestId == nil {
		return localVarReturnValue, nil, reportError("requestId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "requestId", r.requestId, "", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteDatabaseRequest struct {
	ctx context.Context
	ApiService *MultiCloudOpenAPIService
	instanceId string
	tenantId string
	body *DeleteDatabasesParamDo
}

func (r ApiDeleteDatabaseRequest) Body(body DeleteDatabasesParamDo) ApiDeleteDatabaseRequest {
	r.body = &body
	return r
}

func (r ApiDeleteDatabaseRequest) Execute() (*OBCloudResult, *http.Response, error) {
	return r.ApiService.DeleteDatabaseExecute(r)
}

/*
DeleteDatabase Method for DeleteDatabase

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceId
 @param tenantId
 @return ApiDeleteDatabaseRequest
*/
func (a *MultiCloudOpenAPIService) DeleteDatabase(ctx context.Context, instanceId string, tenantId string) ApiDeleteDatabaseRequest {
	return ApiDeleteDatabaseRequest{
		ApiService: a,
		ctx: ctx,
		instanceId: instanceId,
		tenantId: tenantId,
	}
}

// Execute executes the request
//  @return OBCloudResult
func (a *MultiCloudOpenAPIService) DeleteDatabaseExecute(r ApiDeleteDatabaseRequest) (*OBCloudResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OBCloudResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MultiCloudOpenAPIService.DeleteDatabase")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/instances/{instanceId}/tenants/{tenantId}/databases"
	localVarPath = strings.Replace(localVarPath, "{"+"instanceId"+"}", url.PathEscape(parameterValueToString(r.instanceId, "instanceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tenantId"+"}", url.PathEscape(parameterValueToString(r.tenantId, "tenantId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteInstanceRequest struct {
	ctx context.Context
	ApiService *MultiCloudOpenAPIService
	requestId *string
	body *DeleteInstanceOpenRequest
}

func (r ApiDeleteInstanceRequest) RequestId(requestId string) ApiDeleteInstanceRequest {
	r.requestId = &requestId
	return r
}

func (r ApiDeleteInstanceRequest) Body(body DeleteInstanceOpenRequest) ApiDeleteInstanceRequest {
	r.body = &body
	return r
}

func (r ApiDeleteInstanceRequest) Execute() (*OBCloudResultDeleteInstanceResponse, *http.Response, error) {
	return r.ApiService.DeleteInstanceExecute(r)
}

/*
DeleteInstance DeleteInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeleteInstanceRequest
*/
func (a *MultiCloudOpenAPIService) DeleteInstance(ctx context.Context) ApiDeleteInstanceRequest {
	return ApiDeleteInstanceRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return OBCloudResultDeleteInstanceResponse
func (a *MultiCloudOpenAPIService) DeleteInstanceExecute(r ApiDeleteInstanceRequest) (*OBCloudResultDeleteInstanceResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OBCloudResultDeleteInstanceResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MultiCloudOpenAPIService.DeleteInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/instances"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.requestId == nil {
		return localVarReturnValue, nil, reportError("requestId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "requestId", r.requestId, "", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeletePrivatelinkEndpointRequest struct {
	ctx context.Context
	ApiService *MultiCloudOpenAPIService
	instanceId string
	tenantId string
	requestId *string
	addressId *string
	endpointId *string
	status *string
}

func (r ApiDeletePrivatelinkEndpointRequest) RequestId(requestId string) ApiDeletePrivatelinkEndpointRequest {
	r.requestId = &requestId
	return r
}

func (r ApiDeletePrivatelinkEndpointRequest) AddressId(addressId string) ApiDeletePrivatelinkEndpointRequest {
	r.addressId = &addressId
	return r
}

func (r ApiDeletePrivatelinkEndpointRequest) EndpointId(endpointId string) ApiDeletePrivatelinkEndpointRequest {
	r.endpointId = &endpointId
	return r
}

func (r ApiDeletePrivatelinkEndpointRequest) Status(status string) ApiDeletePrivatelinkEndpointRequest {
	r.status = &status
	return r
}

func (r ApiDeletePrivatelinkEndpointRequest) Execute() (*OBCloudResultBoolean, *http.Response, error) {
	return r.ApiService.DeletePrivatelinkEndpointExecute(r)
}

/*
DeletePrivatelinkEndpoint 删除privatelink地址

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceId
 @param tenantId
 @return ApiDeletePrivatelinkEndpointRequest
*/
func (a *MultiCloudOpenAPIService) DeletePrivatelinkEndpoint(ctx context.Context, instanceId string, tenantId string) ApiDeletePrivatelinkEndpointRequest {
	return ApiDeletePrivatelinkEndpointRequest{
		ApiService: a,
		ctx: ctx,
		instanceId: instanceId,
		tenantId: tenantId,
	}
}

// Execute executes the request
//  @return OBCloudResultBoolean
func (a *MultiCloudOpenAPIService) DeletePrivatelinkEndpointExecute(r ApiDeletePrivatelinkEndpointRequest) (*OBCloudResultBoolean, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OBCloudResultBoolean
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MultiCloudOpenAPIService.DeletePrivatelinkEndpoint")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/instances/{instanceId}/tenants/{tenantId}/privatelink"
	localVarPath = strings.Replace(localVarPath, "{"+"instanceId"+"}", url.PathEscape(parameterValueToString(r.instanceId, "instanceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tenantId"+"}", url.PathEscape(parameterValueToString(r.tenantId, "tenantId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.requestId == nil {
		return localVarReturnValue, nil, reportError("requestId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "requestId", r.requestId, "", "")
	if r.addressId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "addressId", r.addressId, "", "")
	}
	if r.endpointId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endpointId", r.endpointId, "", "")
	}
	if r.status != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "status", r.status, "", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteTenantRequest struct {
	ctx context.Context
	ApiService *MultiCloudOpenAPIService
	instanceId string
	tenantId string
	requestId *string
}

func (r ApiDeleteTenantRequest) RequestId(requestId string) ApiDeleteTenantRequest {
	r.requestId = &requestId
	return r
}

func (r ApiDeleteTenantRequest) Execute() (*OBCloudResultSimpleTenantResponse, *http.Response, error) {
	return r.ApiService.DeleteTenantExecute(r)
}

/*
DeleteTenant 删除租户

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceId
 @param tenantId
 @return ApiDeleteTenantRequest
*/
func (a *MultiCloudOpenAPIService) DeleteTenant(ctx context.Context, instanceId string, tenantId string) ApiDeleteTenantRequest {
	return ApiDeleteTenantRequest{
		ApiService: a,
		ctx: ctx,
		instanceId: instanceId,
		tenantId: tenantId,
	}
}

// Execute executes the request
//  @return OBCloudResultSimpleTenantResponse
func (a *MultiCloudOpenAPIService) DeleteTenantExecute(r ApiDeleteTenantRequest) (*OBCloudResultSimpleTenantResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OBCloudResultSimpleTenantResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MultiCloudOpenAPIService.DeleteTenant")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/instances/{instanceId}/tenants/{tenantId}"
	localVarPath = strings.Replace(localVarPath, "{"+"instanceId"+"}", url.PathEscape(parameterValueToString(r.instanceId, "instanceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tenantId"+"}", url.PathEscape(parameterValueToString(r.tenantId, "tenantId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.requestId == nil {
		return localVarReturnValue, nil, reportError("requestId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "requestId", r.requestId, "", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteTenantAddressRequest struct {
	ctx context.Context
	ApiService *MultiCloudOpenAPIService
	instanceId string
	tenantId string
	requestId *string
	addressId *string
}

func (r ApiDeleteTenantAddressRequest) RequestId(requestId string) ApiDeleteTenantAddressRequest {
	r.requestId = &requestId
	return r
}

func (r ApiDeleteTenantAddressRequest) AddressId(addressId string) ApiDeleteTenantAddressRequest {
	r.addressId = &addressId
	return r
}

func (r ApiDeleteTenantAddressRequest) Execute() (*OBCloudResultBoolean, *http.Response, error) {
	return r.ApiService.DeleteTenantAddressExecute(r)
}

/*
DeleteTenantAddress 删除租户地址

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceId
 @param tenantId
 @return ApiDeleteTenantAddressRequest
*/
func (a *MultiCloudOpenAPIService) DeleteTenantAddress(ctx context.Context, instanceId string, tenantId string) ApiDeleteTenantAddressRequest {
	return ApiDeleteTenantAddressRequest{
		ApiService: a,
		ctx: ctx,
		instanceId: instanceId,
		tenantId: tenantId,
	}
}

// Execute executes the request
//  @return OBCloudResultBoolean
func (a *MultiCloudOpenAPIService) DeleteTenantAddressExecute(r ApiDeleteTenantAddressRequest) (*OBCloudResultBoolean, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OBCloudResultBoolean
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MultiCloudOpenAPIService.DeleteTenantAddress")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/instances/{instanceId}/tenants/{tenantId}/address"
	localVarPath = strings.Replace(localVarPath, "{"+"instanceId"+"}", url.PathEscape(parameterValueToString(r.instanceId, "instanceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tenantId"+"}", url.PathEscape(parameterValueToString(r.tenantId, "tenantId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.requestId == nil {
		return localVarReturnValue, nil, reportError("requestId is required and must be specified")
	}
	if r.addressId == nil {
		return localVarReturnValue, nil, reportError("addressId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "requestId", r.requestId, "", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "addressId", r.addressId, "", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteTenantSecurityIpGroupRequest struct {
	ctx context.Context
	ApiService *MultiCloudOpenAPIService
	instanceId string
	tenantId string
	requestId *string
	body *McDeleteTenantSecurityIpGroupRequest
}

func (r ApiDeleteTenantSecurityIpGroupRequest) RequestId(requestId string) ApiDeleteTenantSecurityIpGroupRequest {
	r.requestId = &requestId
	return r
}

func (r ApiDeleteTenantSecurityIpGroupRequest) Body(body McDeleteTenantSecurityIpGroupRequest) ApiDeleteTenantSecurityIpGroupRequest {
	r.body = &body
	return r
}

func (r ApiDeleteTenantSecurityIpGroupRequest) Execute() (*OBCloudResultMcDeleteTenantSecurityIpGroupResponse, *http.Response, error) {
	return r.ApiService.DeleteTenantSecurityIpGroupExecute(r)
}

/*
DeleteTenantSecurityIpGroup DeleteTenantSecurityIpGroup

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceId
 @param tenantId
 @return ApiDeleteTenantSecurityIpGroupRequest
*/
func (a *MultiCloudOpenAPIService) DeleteTenantSecurityIpGroup(ctx context.Context, instanceId string, tenantId string) ApiDeleteTenantSecurityIpGroupRequest {
	return ApiDeleteTenantSecurityIpGroupRequest{
		ApiService: a,
		ctx: ctx,
		instanceId: instanceId,
		tenantId: tenantId,
	}
}

// Execute executes the request
//  @return OBCloudResultMcDeleteTenantSecurityIpGroupResponse
func (a *MultiCloudOpenAPIService) DeleteTenantSecurityIpGroupExecute(r ApiDeleteTenantSecurityIpGroupRequest) (*OBCloudResultMcDeleteTenantSecurityIpGroupResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OBCloudResultMcDeleteTenantSecurityIpGroupResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MultiCloudOpenAPIService.DeleteTenantSecurityIpGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/instances/{instanceId}/tenants/{tenantId}/securityIpGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"instanceId"+"}", url.PathEscape(parameterValueToString(r.instanceId, "instanceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tenantId"+"}", url.PathEscape(parameterValueToString(r.tenantId, "tenantId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.requestId == nil {
		return localVarReturnValue, nil, reportError("requestId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "requestId", r.requestId, "", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteTenantUsersRequest struct {
	ctx context.Context
	ApiService *MultiCloudOpenAPIService
	instanceId string
	tenantId string
	body *DeleteTenantUserParamDo
}

func (r ApiDeleteTenantUsersRequest) Body(body DeleteTenantUserParamDo) ApiDeleteTenantUsersRequest {
	r.body = &body
	return r
}

func (r ApiDeleteTenantUsersRequest) Execute() (*OBCloudResult, *http.Response, error) {
	return r.ApiService.DeleteTenantUsersExecute(r)
}

/*
DeleteTenantUsers 删除租户内特定用户

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceId
 @param tenantId
 @return ApiDeleteTenantUsersRequest
*/
func (a *MultiCloudOpenAPIService) DeleteTenantUsers(ctx context.Context, instanceId string, tenantId string) ApiDeleteTenantUsersRequest {
	return ApiDeleteTenantUsersRequest{
		ApiService: a,
		ctx: ctx,
		instanceId: instanceId,
		tenantId: tenantId,
	}
}

// Execute executes the request
//  @return OBCloudResult
func (a *MultiCloudOpenAPIService) DeleteTenantUsersExecute(r ApiDeleteTenantUsersRequest) (*OBCloudResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OBCloudResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MultiCloudOpenAPIService.DeleteTenantUsers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/instances/{instanceId}/tenants/{tenantId}/tenantUsers"
	localVarPath = strings.Replace(localVarPath, "{"+"instanceId"+"}", url.PathEscape(parameterValueToString(r.instanceId, "instanceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tenantId"+"}", url.PathEscape(parameterValueToString(r.tenantId, "tenantId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeDatabasesRequest struct {
	ctx context.Context
	ApiService *MultiCloudOpenAPIService
	instanceId string
	tenantId string
	requestId *string
	databaseName *string
	pageNumber *int32
	pageSize *int32
}

func (r ApiDescribeDatabasesRequest) RequestId(requestId string) ApiDescribeDatabasesRequest {
	r.requestId = &requestId
	return r
}

func (r ApiDescribeDatabasesRequest) DatabaseName(databaseName string) ApiDescribeDatabasesRequest {
	r.databaseName = &databaseName
	return r
}

func (r ApiDescribeDatabasesRequest) PageNumber(pageNumber int32) ApiDescribeDatabasesRequest {
	r.pageNumber = &pageNumber
	return r
}

func (r ApiDescribeDatabasesRequest) PageSize(pageSize int32) ApiDescribeDatabasesRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiDescribeDatabasesRequest) Execute() (*OBCloudResultOBCloudPagingDataDescribeDatabasesResponseV2, *http.Response, error) {
	return r.ApiService.DescribeDatabasesExecute(r)
}

/*
DescribeDatabases DescribeDatabases

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceId
 @param tenantId
 @return ApiDescribeDatabasesRequest
*/
func (a *MultiCloudOpenAPIService) DescribeDatabases(ctx context.Context, instanceId string, tenantId string) ApiDescribeDatabasesRequest {
	return ApiDescribeDatabasesRequest{
		ApiService: a,
		ctx: ctx,
		instanceId: instanceId,
		tenantId: tenantId,
	}
}

// Execute executes the request
//  @return OBCloudResultOBCloudPagingDataDescribeDatabasesResponseV2
func (a *MultiCloudOpenAPIService) DescribeDatabasesExecute(r ApiDescribeDatabasesRequest) (*OBCloudResultOBCloudPagingDataDescribeDatabasesResponseV2, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OBCloudResultOBCloudPagingDataDescribeDatabasesResponseV2
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MultiCloudOpenAPIService.DescribeDatabases")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/instances/{instanceId}/tenants/{tenantId}/databases"
	localVarPath = strings.Replace(localVarPath, "{"+"instanceId"+"}", url.PathEscape(parameterValueToString(r.instanceId, "instanceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tenantId"+"}", url.PathEscape(parameterValueToString(r.tenantId, "tenantId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.requestId == nil {
		return localVarReturnValue, nil, reportError("requestId is required and must be specified")
	}

	if r.databaseName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "databaseName", r.databaseName, "", "")
	}
	if r.pageNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageNumber", r.pageNumber, "", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "requestId", r.requestId, "", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeInstanceRequest struct {
	ctx context.Context
	ApiService *MultiCloudOpenAPIService
	instanceId string
	requestId *string
}

func (r ApiDescribeInstanceRequest) RequestId(requestId string) ApiDescribeInstanceRequest {
	r.requestId = &requestId
	return r
}

func (r ApiDescribeInstanceRequest) Execute() (*OBCloudResultDescribeInstanceResponseV2OpenAPI, *http.Response, error) {
	return r.ApiService.DescribeInstanceExecute(r)
}

/*
DescribeInstance DescribeInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceId
 @return ApiDescribeInstanceRequest
*/
func (a *MultiCloudOpenAPIService) DescribeInstance(ctx context.Context, instanceId string) ApiDescribeInstanceRequest {
	return ApiDescribeInstanceRequest{
		ApiService: a,
		ctx: ctx,
		instanceId: instanceId,
	}
}

// Execute executes the request
//  @return OBCloudResultDescribeInstanceResponseV2OpenAPI
func (a *MultiCloudOpenAPIService) DescribeInstanceExecute(r ApiDescribeInstanceRequest) (*OBCloudResultDescribeInstanceResponseV2OpenAPI, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OBCloudResultDescribeInstanceResponseV2OpenAPI
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MultiCloudOpenAPIService.DescribeInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/instances/{instanceId}"
	localVarPath = strings.Replace(localVarPath, "{"+"instanceId"+"}", url.PathEscape(parameterValueToString(r.instanceId, "instanceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.requestId == nil {
		return localVarReturnValue, nil, reportError("requestId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "requestId", r.requestId, "", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeInstancesRequest struct {
	ctx context.Context
	ApiService *MultiCloudOpenAPIService
	requestId *string
	instanceName *string
	instanceId *string
	xObProjectId *string
	tagList *string
	organizationId *string
	pageNumber *int32
	pageSize *int32
}

func (r ApiDescribeInstancesRequest) RequestId(requestId string) ApiDescribeInstancesRequest {
	r.requestId = &requestId
	return r
}

func (r ApiDescribeInstancesRequest) InstanceName(instanceName string) ApiDescribeInstancesRequest {
	r.instanceName = &instanceName
	return r
}

func (r ApiDescribeInstancesRequest) InstanceId(instanceId string) ApiDescribeInstancesRequest {
	r.instanceId = &instanceId
	return r
}

func (r ApiDescribeInstancesRequest) XObProjectId(xObProjectId string) ApiDescribeInstancesRequest {
	r.xObProjectId = &xObProjectId
	return r
}

func (r ApiDescribeInstancesRequest) TagList(tagList string) ApiDescribeInstancesRequest {
	r.tagList = &tagList
	return r
}

func (r ApiDescribeInstancesRequest) OrganizationId(organizationId string) ApiDescribeInstancesRequest {
	r.organizationId = &organizationId
	return r
}

func (r ApiDescribeInstancesRequest) PageNumber(pageNumber int32) ApiDescribeInstancesRequest {
	r.pageNumber = &pageNumber
	return r
}

func (r ApiDescribeInstancesRequest) PageSize(pageSize int32) ApiDescribeInstancesRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiDescribeInstancesRequest) Execute() (*OBCloudResultOBCloudPagingDataListDescribeInstancesResponseV2OpenAPI, *http.Response, error) {
	return r.ApiService.DescribeInstancesExecute(r)
}

/*
DescribeInstances DescribeInstances

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDescribeInstancesRequest
*/
func (a *MultiCloudOpenAPIService) DescribeInstances(ctx context.Context) ApiDescribeInstancesRequest {
	return ApiDescribeInstancesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return OBCloudResultOBCloudPagingDataListDescribeInstancesResponseV2OpenAPI
func (a *MultiCloudOpenAPIService) DescribeInstancesExecute(r ApiDescribeInstancesRequest) (*OBCloudResultOBCloudPagingDataListDescribeInstancesResponseV2OpenAPI, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OBCloudResultOBCloudPagingDataListDescribeInstancesResponseV2OpenAPI
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MultiCloudOpenAPIService.DescribeInstances")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/instances"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.requestId == nil {
		return localVarReturnValue, nil, reportError("requestId is required and must be specified")
	}

	if r.instanceName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "instanceName", r.instanceName, "", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "requestId", r.requestId, "", "")
	if r.instanceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "instanceId", r.instanceId, "", "")
	}
	if r.tagList != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tagList", r.tagList, "", "")
	}
	if r.organizationId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "organizationId", r.organizationId, "", "")
	}
	if r.pageNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageNumber", r.pageNumber, "", "")
	} else {
		var defaultValue int32 = 1
		r.pageNumber = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "", "")
	} else {
		var defaultValue int32 = 10
		r.pageSize = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xObProjectId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Ob-Project-Id", r.xObProjectId, "", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeTenantRequest struct {
	ctx context.Context
	ApiService *MultiCloudOpenAPIService
	instanceId string
	tenantId string
	requestId *string
}

func (r ApiDescribeTenantRequest) RequestId(requestId string) ApiDescribeTenantRequest {
	r.requestId = &requestId
	return r
}

func (r ApiDescribeTenantRequest) Execute() (*OBCloudResultTenantDTO, *http.Response, error) {
	return r.ApiService.DescribeTenantExecute(r)
}

/*
DescribeTenant 查询特定租户

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceId
 @param tenantId
 @return ApiDescribeTenantRequest
*/
func (a *MultiCloudOpenAPIService) DescribeTenant(ctx context.Context, instanceId string, tenantId string) ApiDescribeTenantRequest {
	return ApiDescribeTenantRequest{
		ApiService: a,
		ctx: ctx,
		instanceId: instanceId,
		tenantId: tenantId,
	}
}

// Execute executes the request
//  @return OBCloudResultTenantDTO
func (a *MultiCloudOpenAPIService) DescribeTenantExecute(r ApiDescribeTenantRequest) (*OBCloudResultTenantDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OBCloudResultTenantDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MultiCloudOpenAPIService.DescribeTenant")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/instances/{instanceId}/tenants/{tenantId}"
	localVarPath = strings.Replace(localVarPath, "{"+"instanceId"+"}", url.PathEscape(parameterValueToString(r.instanceId, "instanceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tenantId"+"}", url.PathEscape(parameterValueToString(r.tenantId, "tenantId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.requestId == nil {
		return localVarReturnValue, nil, reportError("requestId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "requestId", r.requestId, "", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeTenantAddressRequest struct {
	ctx context.Context
	ApiService *MultiCloudOpenAPIService
	instanceId string
	tenantId string
	requestId *string
	addressId *string
}

func (r ApiDescribeTenantAddressRequest) RequestId(requestId string) ApiDescribeTenantAddressRequest {
	r.requestId = &requestId
	return r
}

func (r ApiDescribeTenantAddressRequest) AddressId(addressId string) ApiDescribeTenantAddressRequest {
	r.addressId = &addressId
	return r
}

func (r ApiDescribeTenantAddressRequest) Execute() (*OBCloudResultTenantConnectionDTO, *http.Response, error) {
	return r.ApiService.DescribeTenantAddressExecute(r)
}

/*
DescribeTenantAddress 查询租户地址

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceId
 @param tenantId
 @return ApiDescribeTenantAddressRequest
*/
func (a *MultiCloudOpenAPIService) DescribeTenantAddress(ctx context.Context, instanceId string, tenantId string) ApiDescribeTenantAddressRequest {
	return ApiDescribeTenantAddressRequest{
		ApiService: a,
		ctx: ctx,
		instanceId: instanceId,
		tenantId: tenantId,
	}
}

// Execute executes the request
//  @return OBCloudResultTenantConnectionDTO
func (a *MultiCloudOpenAPIService) DescribeTenantAddressExecute(r ApiDescribeTenantAddressRequest) (*OBCloudResultTenantConnectionDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OBCloudResultTenantConnectionDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MultiCloudOpenAPIService.DescribeTenantAddress")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/instances/{instanceId}/tenants/{tenantId}/address"
	localVarPath = strings.Replace(localVarPath, "{"+"instanceId"+"}", url.PathEscape(parameterValueToString(r.instanceId, "instanceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tenantId"+"}", url.PathEscape(parameterValueToString(r.tenantId, "tenantId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.requestId == nil {
		return localVarReturnValue, nil, reportError("requestId is required and must be specified")
	}
	if r.addressId == nil {
		return localVarReturnValue, nil, reportError("addressId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "requestId", r.requestId, "", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "addressId", r.addressId, "", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeTenantPrivateLinkRequest struct {
	ctx context.Context
	ApiService *MultiCloudOpenAPIService
	instanceId string
	tenantId string
	requestId *string
	addressId *string
}

func (r ApiDescribeTenantPrivateLinkRequest) RequestId(requestId string) ApiDescribeTenantPrivateLinkRequest {
	r.requestId = &requestId
	return r
}

func (r ApiDescribeTenantPrivateLinkRequest) AddressId(addressId string) ApiDescribeTenantPrivateLinkRequest {
	r.addressId = &addressId
	return r
}

func (r ApiDescribeTenantPrivateLinkRequest) Execute() (*OBCloudResultListTenantConnectionDTO, *http.Response, error) {
	return r.ApiService.DescribeTenantPrivateLinkExecute(r)
}

/*
DescribeTenantPrivateLink 查询租户的privatelink地址信息

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceId
 @param tenantId
 @return ApiDescribeTenantPrivateLinkRequest
*/
func (a *MultiCloudOpenAPIService) DescribeTenantPrivateLink(ctx context.Context, instanceId string, tenantId string) ApiDescribeTenantPrivateLinkRequest {
	return ApiDescribeTenantPrivateLinkRequest{
		ApiService: a,
		ctx: ctx,
		instanceId: instanceId,
		tenantId: tenantId,
	}
}

// Execute executes the request
//  @return OBCloudResultListTenantConnectionDTO
func (a *MultiCloudOpenAPIService) DescribeTenantPrivateLinkExecute(r ApiDescribeTenantPrivateLinkRequest) (*OBCloudResultListTenantConnectionDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OBCloudResultListTenantConnectionDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MultiCloudOpenAPIService.DescribeTenantPrivateLink")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/instances/{instanceId}/tenants/{tenantId}/privatelink"
	localVarPath = strings.Replace(localVarPath, "{"+"instanceId"+"}", url.PathEscape(parameterValueToString(r.instanceId, "instanceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tenantId"+"}", url.PathEscape(parameterValueToString(r.tenantId, "tenantId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.requestId == nil {
		return localVarReturnValue, nil, reportError("requestId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "requestId", r.requestId, "", "")
	if r.addressId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "addressId", r.addressId, "", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeTenantPublicAddressRequest struct {
	ctx context.Context
	ApiService *MultiCloudOpenAPIService
	instanceId string
	tenantId string
	requestId *string
}

func (r ApiDescribeTenantPublicAddressRequest) RequestId(requestId string) ApiDescribeTenantPublicAddressRequest {
	r.requestId = &requestId
	return r
}

func (r ApiDescribeTenantPublicAddressRequest) Execute() (*OBCloudResultTenantConnectionDTO, *http.Response, error) {
	return r.ApiService.DescribeTenantPublicAddressExecute(r)
}

/*
DescribeTenantPublicAddress 查询租户的公网主地址

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceId
 @param tenantId
 @return ApiDescribeTenantPublicAddressRequest
*/
func (a *MultiCloudOpenAPIService) DescribeTenantPublicAddress(ctx context.Context, instanceId string, tenantId string) ApiDescribeTenantPublicAddressRequest {
	return ApiDescribeTenantPublicAddressRequest{
		ApiService: a,
		ctx: ctx,
		instanceId: instanceId,
		tenantId: tenantId,
	}
}

// Execute executes the request
//  @return OBCloudResultTenantConnectionDTO
func (a *MultiCloudOpenAPIService) DescribeTenantPublicAddressExecute(r ApiDescribeTenantPublicAddressRequest) (*OBCloudResultTenantConnectionDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OBCloudResultTenantConnectionDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MultiCloudOpenAPIService.DescribeTenantPublicAddress")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/instances/{instanceId}/tenants/{tenantId}/publicaddress"
	localVarPath = strings.Replace(localVarPath, "{"+"instanceId"+"}", url.PathEscape(parameterValueToString(r.instanceId, "instanceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tenantId"+"}", url.PathEscape(parameterValueToString(r.tenantId, "tenantId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.requestId == nil {
		return localVarReturnValue, nil, reportError("requestId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "requestId", r.requestId, "", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeTenantSecurityIpGroupsRequest struct {
	ctx context.Context
	ApiService *MultiCloudOpenAPIService
	instanceId string
	tenantId string
	requestId *string
}

func (r ApiDescribeTenantSecurityIpGroupsRequest) RequestId(requestId string) ApiDescribeTenantSecurityIpGroupsRequest {
	r.requestId = &requestId
	return r
}

func (r ApiDescribeTenantSecurityIpGroupsRequest) Execute() (*OBCloudResultOBCloudPagingDataMcTenantSecurityIpGroupsResponse, *http.Response, error) {
	return r.ApiService.DescribeTenantSecurityIpGroupsExecute(r)
}

/*
DescribeTenantSecurityIpGroups DescribeTenantSecurityIpGroups

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceId
 @param tenantId
 @return ApiDescribeTenantSecurityIpGroupsRequest
*/
func (a *MultiCloudOpenAPIService) DescribeTenantSecurityIpGroups(ctx context.Context, instanceId string, tenantId string) ApiDescribeTenantSecurityIpGroupsRequest {
	return ApiDescribeTenantSecurityIpGroupsRequest{
		ApiService: a,
		ctx: ctx,
		instanceId: instanceId,
		tenantId: tenantId,
	}
}

// Execute executes the request
//  @return OBCloudResultOBCloudPagingDataMcTenantSecurityIpGroupsResponse
func (a *MultiCloudOpenAPIService) DescribeTenantSecurityIpGroupsExecute(r ApiDescribeTenantSecurityIpGroupsRequest) (*OBCloudResultOBCloudPagingDataMcTenantSecurityIpGroupsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OBCloudResultOBCloudPagingDataMcTenantSecurityIpGroupsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MultiCloudOpenAPIService.DescribeTenantSecurityIpGroups")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/instances/{instanceId}/tenants/{tenantId}/securityIpGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"instanceId"+"}", url.PathEscape(parameterValueToString(r.instanceId, "instanceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tenantId"+"}", url.PathEscape(parameterValueToString(r.tenantId, "tenantId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.requestId == nil {
		return localVarReturnValue, nil, reportError("requestId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "requestId", r.requestId, "", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeTenantUsersRequest struct {
	ctx context.Context
	ApiService *MultiCloudOpenAPIService
	instanceId string
	tenantId string
	requestId *string
	userName *string
	pageNumber *int32
	pageSize *int32
	searchKey *string
}

func (r ApiDescribeTenantUsersRequest) RequestId(requestId string) ApiDescribeTenantUsersRequest {
	r.requestId = &requestId
	return r
}

func (r ApiDescribeTenantUsersRequest) UserName(userName string) ApiDescribeTenantUsersRequest {
	r.userName = &userName
	return r
}

func (r ApiDescribeTenantUsersRequest) PageNumber(pageNumber int32) ApiDescribeTenantUsersRequest {
	r.pageNumber = &pageNumber
	return r
}

func (r ApiDescribeTenantUsersRequest) PageSize(pageSize int32) ApiDescribeTenantUsersRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiDescribeTenantUsersRequest) SearchKey(searchKey string) ApiDescribeTenantUsersRequest {
	r.searchKey = &searchKey
	return r
}

func (r ApiDescribeTenantUsersRequest) Execute() (*OBCloudResultOBCloudPagingDataOcpDbUserDtoV2, *http.Response, error) {
	return r.ApiService.DescribeTenantUsersExecute(r)
}

/*
DescribeTenantUsers 查询租户内的用户

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceId
 @param tenantId
 @return ApiDescribeTenantUsersRequest
*/
func (a *MultiCloudOpenAPIService) DescribeTenantUsers(ctx context.Context, instanceId string, tenantId string) ApiDescribeTenantUsersRequest {
	return ApiDescribeTenantUsersRequest{
		ApiService: a,
		ctx: ctx,
		instanceId: instanceId,
		tenantId: tenantId,
	}
}

// Execute executes the request
//  @return OBCloudResultOBCloudPagingDataOcpDbUserDtoV2
func (a *MultiCloudOpenAPIService) DescribeTenantUsersExecute(r ApiDescribeTenantUsersRequest) (*OBCloudResultOBCloudPagingDataOcpDbUserDtoV2, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OBCloudResultOBCloudPagingDataOcpDbUserDtoV2
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MultiCloudOpenAPIService.DescribeTenantUsers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/instances/{instanceId}/tenants/{tenantId}/tenantUsers"
	localVarPath = strings.Replace(localVarPath, "{"+"instanceId"+"}", url.PathEscape(parameterValueToString(r.instanceId, "instanceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tenantId"+"}", url.PathEscape(parameterValueToString(r.tenantId, "tenantId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.requestId == nil {
		return localVarReturnValue, nil, reportError("requestId is required and must be specified")
	}

	if r.userName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userName", r.userName, "", "")
	}
	if r.pageNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageNumber", r.pageNumber, "", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "", "")
	}
	if r.searchKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "searchKey", r.searchKey, "", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "requestId", r.requestId, "", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiModifyDatabaseDescriptionRequest struct {
	ctx context.Context
	ApiService *MultiCloudOpenAPIService
	instanceId string
	tenantId string
	databaseName string
	requestId *string
	body *ModifyDatabaseDescriptionRequestV2
}

func (r ApiModifyDatabaseDescriptionRequest) RequestId(requestId string) ApiModifyDatabaseDescriptionRequest {
	r.requestId = &requestId
	return r
}

func (r ApiModifyDatabaseDescriptionRequest) Body(body ModifyDatabaseDescriptionRequestV2) ApiModifyDatabaseDescriptionRequest {
	r.body = &body
	return r
}

func (r ApiModifyDatabaseDescriptionRequest) Execute() (*OBCloudResultModifyDatabaseDescriptionResponseV2, *http.Response, error) {
	return r.ApiService.ModifyDatabaseDescriptionExecute(r)
}

/*
ModifyDatabaseDescription ModifyDatabaseDescription

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceId
 @param tenantId
 @param databaseName
 @return ApiModifyDatabaseDescriptionRequest
*/
func (a *MultiCloudOpenAPIService) ModifyDatabaseDescription(ctx context.Context, instanceId string, tenantId string, databaseName string) ApiModifyDatabaseDescriptionRequest {
	return ApiModifyDatabaseDescriptionRequest{
		ApiService: a,
		ctx: ctx,
		instanceId: instanceId,
		tenantId: tenantId,
		databaseName: databaseName,
	}
}

// Execute executes the request
//  @return OBCloudResultModifyDatabaseDescriptionResponseV2
func (a *MultiCloudOpenAPIService) ModifyDatabaseDescriptionExecute(r ApiModifyDatabaseDescriptionRequest) (*OBCloudResultModifyDatabaseDescriptionResponseV2, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OBCloudResultModifyDatabaseDescriptionResponseV2
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MultiCloudOpenAPIService.ModifyDatabaseDescription")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/instances/{instanceId}/tenants/{tenantId}/databases/{databaseName}/description"
	localVarPath = strings.Replace(localVarPath, "{"+"instanceId"+"}", url.PathEscape(parameterValueToString(r.instanceId, "instanceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tenantId"+"}", url.PathEscape(parameterValueToString(r.tenantId, "tenantId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"databaseName"+"}", url.PathEscape(parameterValueToString(r.databaseName, "databaseName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.requestId == nil {
		return localVarReturnValue, nil, reportError("requestId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "requestId", r.requestId, "", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiModifyDatabaseUserRoleRequest struct {
	ctx context.Context
	ApiService *MultiCloudOpenAPIService
	instanceId string
	tenantId string
	databaseId string
	body *ModifyDatabaseUserRolesParamDo
}

func (r ApiModifyDatabaseUserRoleRequest) Body(body ModifyDatabaseUserRolesParamDo) ApiModifyDatabaseUserRoleRequest {
	r.body = &body
	return r
}

func (r ApiModifyDatabaseUserRoleRequest) Execute() (*OBCloudResult, *http.Response, error) {
	return r.ApiService.ModifyDatabaseUserRoleExecute(r)
}

/*
ModifyDatabaseUserRole 修改角色列表

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceId
 @param tenantId
 @param databaseId
 @return ApiModifyDatabaseUserRoleRequest
*/
func (a *MultiCloudOpenAPIService) ModifyDatabaseUserRole(ctx context.Context, instanceId string, tenantId string, databaseId string) ApiModifyDatabaseUserRoleRequest {
	return ApiModifyDatabaseUserRoleRequest{
		ApiService: a,
		ctx: ctx,
		instanceId: instanceId,
		tenantId: tenantId,
		databaseId: databaseId,
	}
}

// Execute executes the request
//  @return OBCloudResult
func (a *MultiCloudOpenAPIService) ModifyDatabaseUserRoleExecute(r ApiModifyDatabaseUserRoleRequest) (*OBCloudResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OBCloudResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MultiCloudOpenAPIService.ModifyDatabaseUserRole")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/instances/{instanceId}/tenants/{tenantId}/databases/{databaseId}/authorization"
	localVarPath = strings.Replace(localVarPath, "{"+"instanceId"+"}", url.PathEscape(parameterValueToString(r.instanceId, "instanceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tenantId"+"}", url.PathEscape(parameterValueToString(r.tenantId, "tenantId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"databaseId"+"}", url.PathEscape(parameterValueToString(r.databaseId, "databaseId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiModifyInstanceNameRequest struct {
	ctx context.Context
	ApiService *MultiCloudOpenAPIService
	instanceId string
	requestId *string
	xObProjectId *string
	body *ModifyInstanceNameRequestV2
}

func (r ApiModifyInstanceNameRequest) RequestId(requestId string) ApiModifyInstanceNameRequest {
	r.requestId = &requestId
	return r
}

func (r ApiModifyInstanceNameRequest) XObProjectId(xObProjectId string) ApiModifyInstanceNameRequest {
	r.xObProjectId = &xObProjectId
	return r
}

func (r ApiModifyInstanceNameRequest) Body(body ModifyInstanceNameRequestV2) ApiModifyInstanceNameRequest {
	r.body = &body
	return r
}

func (r ApiModifyInstanceNameRequest) Execute() (*OBCloudResultModifyInstanceNameResponseV2, *http.Response, error) {
	return r.ApiService.ModifyInstanceNameExecute(r)
}

/*
ModifyInstanceName ModifyInstanceName

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceId
 @return ApiModifyInstanceNameRequest
*/
func (a *MultiCloudOpenAPIService) ModifyInstanceName(ctx context.Context, instanceId string) ApiModifyInstanceNameRequest {
	return ApiModifyInstanceNameRequest{
		ApiService: a,
		ctx: ctx,
		instanceId: instanceId,
	}
}

// Execute executes the request
//  @return OBCloudResultModifyInstanceNameResponseV2
func (a *MultiCloudOpenAPIService) ModifyInstanceNameExecute(r ApiModifyInstanceNameRequest) (*OBCloudResultModifyInstanceNameResponseV2, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OBCloudResultModifyInstanceNameResponseV2
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MultiCloudOpenAPIService.ModifyInstanceName")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/instances/{instanceId}/instanceName"
	localVarPath = strings.Replace(localVarPath, "{"+"instanceId"+"}", url.PathEscape(parameterValueToString(r.instanceId, "instanceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.requestId == nil {
		return localVarReturnValue, nil, reportError("requestId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "requestId", r.requestId, "", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xObProjectId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Ob-Project-Id", r.xObProjectId, "", "")
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiModifyInstanceNodeNumRequest struct {
	ctx context.Context
	ApiService *MultiCloudOpenAPIService
	instanceId string
	requestId *string
	xObProjectId *string
	body *MultiCloudModifyInstanceNodeNumRequest
}

func (r ApiModifyInstanceNodeNumRequest) RequestId(requestId string) ApiModifyInstanceNodeNumRequest {
	r.requestId = &requestId
	return r
}

func (r ApiModifyInstanceNodeNumRequest) XObProjectId(xObProjectId string) ApiModifyInstanceNodeNumRequest {
	r.xObProjectId = &xObProjectId
	return r
}

func (r ApiModifyInstanceNodeNumRequest) Body(body MultiCloudModifyInstanceNodeNumRequest) ApiModifyInstanceNodeNumRequest {
	r.body = &body
	return r
}

func (r ApiModifyInstanceNodeNumRequest) Execute() (*OBCloudResultModifyInstanceResponseV2OpenApi, *http.Response, error) {
	return r.ApiService.ModifyInstanceNodeNumExecute(r)
}

/*
ModifyInstanceNodeNum ModifyInstanceNodeNum

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceId
 @return ApiModifyInstanceNodeNumRequest
*/
func (a *MultiCloudOpenAPIService) ModifyInstanceNodeNum(ctx context.Context, instanceId string) ApiModifyInstanceNodeNumRequest {
	return ApiModifyInstanceNodeNumRequest{
		ApiService: a,
		ctx: ctx,
		instanceId: instanceId,
	}
}

// Execute executes the request
//  @return OBCloudResultModifyInstanceResponseV2OpenApi
func (a *MultiCloudOpenAPIService) ModifyInstanceNodeNumExecute(r ApiModifyInstanceNodeNumRequest) (*OBCloudResultModifyInstanceResponseV2OpenApi, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OBCloudResultModifyInstanceResponseV2OpenApi
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MultiCloudOpenAPIService.ModifyInstanceNodeNum")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/instances/{instanceId}/nodeNum"
	localVarPath = strings.Replace(localVarPath, "{"+"instanceId"+"}", url.PathEscape(parameterValueToString(r.instanceId, "instanceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.requestId == nil {
		return localVarReturnValue, nil, reportError("requestId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "requestId", r.requestId, "", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xObProjectId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Ob-Project-Id", r.xObProjectId, "", "")
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiModifyInstanceSpecRequest struct {
	ctx context.Context
	ApiService *MultiCloudOpenAPIService
	instanceId string
	requestId *string
	xObProjectId *string
	body *MultiCloudModifyInstanceSpecRequest
}

func (r ApiModifyInstanceSpecRequest) RequestId(requestId string) ApiModifyInstanceSpecRequest {
	r.requestId = &requestId
	return r
}

func (r ApiModifyInstanceSpecRequest) XObProjectId(xObProjectId string) ApiModifyInstanceSpecRequest {
	r.xObProjectId = &xObProjectId
	return r
}

func (r ApiModifyInstanceSpecRequest) Body(body MultiCloudModifyInstanceSpecRequest) ApiModifyInstanceSpecRequest {
	r.body = &body
	return r
}

func (r ApiModifyInstanceSpecRequest) Execute() (*OBCloudResultModifyInstanceResponseV2OpenApi, *http.Response, error) {
	return r.ApiService.ModifyInstanceSpecExecute(r)
}

/*
ModifyInstanceSpec ModifyInstanceSpec

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceId
 @return ApiModifyInstanceSpecRequest
*/
func (a *MultiCloudOpenAPIService) ModifyInstanceSpec(ctx context.Context, instanceId string) ApiModifyInstanceSpecRequest {
	return ApiModifyInstanceSpecRequest{
		ApiService: a,
		ctx: ctx,
		instanceId: instanceId,
	}
}

// Execute executes the request
//  @return OBCloudResultModifyInstanceResponseV2OpenApi
func (a *MultiCloudOpenAPIService) ModifyInstanceSpecExecute(r ApiModifyInstanceSpecRequest) (*OBCloudResultModifyInstanceResponseV2OpenApi, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OBCloudResultModifyInstanceResponseV2OpenApi
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MultiCloudOpenAPIService.ModifyInstanceSpec")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/instances/{instanceId}/spec"
	localVarPath = strings.Replace(localVarPath, "{"+"instanceId"+"}", url.PathEscape(parameterValueToString(r.instanceId, "instanceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.requestId == nil {
		return localVarReturnValue, nil, reportError("requestId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "requestId", r.requestId, "", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xObProjectId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Ob-Project-Id", r.xObProjectId, "", "")
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiModifyTenantNameRequest struct {
	ctx context.Context
	ApiService *MultiCloudOpenAPIService
	instanceId string
	tenantId string
	requestId *string
	body *ModifyTenantNameRequestV2
}

func (r ApiModifyTenantNameRequest) RequestId(requestId string) ApiModifyTenantNameRequest {
	r.requestId = &requestId
	return r
}

func (r ApiModifyTenantNameRequest) Body(body ModifyTenantNameRequestV2) ApiModifyTenantNameRequest {
	r.body = &body
	return r
}

func (r ApiModifyTenantNameRequest) Execute() (*OBCloudResultModifyTenantNameResponseV2, *http.Response, error) {
	return r.ApiService.ModifyTenantNameExecute(r)
}

/*
ModifyTenantName 修改租户名称

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceId
 @param tenantId
 @return ApiModifyTenantNameRequest
*/
func (a *MultiCloudOpenAPIService) ModifyTenantName(ctx context.Context, instanceId string, tenantId string) ApiModifyTenantNameRequest {
	return ApiModifyTenantNameRequest{
		ApiService: a,
		ctx: ctx,
		instanceId: instanceId,
		tenantId: tenantId,
	}
}

// Execute executes the request
//  @return OBCloudResultModifyTenantNameResponseV2
func (a *MultiCloudOpenAPIService) ModifyTenantNameExecute(r ApiModifyTenantNameRequest) (*OBCloudResultModifyTenantNameResponseV2, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OBCloudResultModifyTenantNameResponseV2
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MultiCloudOpenAPIService.ModifyTenantName")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/instances/{instanceId}/tenants/{tenantId}/tenantName"
	localVarPath = strings.Replace(localVarPath, "{"+"instanceId"+"}", url.PathEscape(parameterValueToString(r.instanceId, "instanceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tenantId"+"}", url.PathEscape(parameterValueToString(r.tenantId, "tenantId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.requestId == nil {
		return localVarReturnValue, nil, reportError("requestId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "requestId", r.requestId, "", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiModifyTenantPrimaryZoneRequest struct {
	ctx context.Context
	ApiService *MultiCloudOpenAPIService
	instanceId string
	tenantId string
	requestId *string
	body *ModifyTenantPrimaryZoneRequest
}

func (r ApiModifyTenantPrimaryZoneRequest) RequestId(requestId string) ApiModifyTenantPrimaryZoneRequest {
	r.requestId = &requestId
	return r
}

func (r ApiModifyTenantPrimaryZoneRequest) Body(body ModifyTenantPrimaryZoneRequest) ApiModifyTenantPrimaryZoneRequest {
	r.body = &body
	return r
}

func (r ApiModifyTenantPrimaryZoneRequest) Execute() (*OBCloudResultModifyTenantPrimaryZoneResponse, *http.Response, error) {
	return r.ApiService.ModifyTenantPrimaryZoneExecute(r)
}

/*
ModifyTenantPrimaryZone 修改租户主可用区

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceId
 @param tenantId
 @return ApiModifyTenantPrimaryZoneRequest
*/
func (a *MultiCloudOpenAPIService) ModifyTenantPrimaryZone(ctx context.Context, instanceId string, tenantId string) ApiModifyTenantPrimaryZoneRequest {
	return ApiModifyTenantPrimaryZoneRequest{
		ApiService: a,
		ctx: ctx,
		instanceId: instanceId,
		tenantId: tenantId,
	}
}

// Execute executes the request
//  @return OBCloudResultModifyTenantPrimaryZoneResponse
func (a *MultiCloudOpenAPIService) ModifyTenantPrimaryZoneExecute(r ApiModifyTenantPrimaryZoneRequest) (*OBCloudResultModifyTenantPrimaryZoneResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OBCloudResultModifyTenantPrimaryZoneResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MultiCloudOpenAPIService.ModifyTenantPrimaryZone")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/instances/{instanceId}/tenants/{tenantId}/primaryZone"
	localVarPath = strings.Replace(localVarPath, "{"+"instanceId"+"}", url.PathEscape(parameterValueToString(r.instanceId, "instanceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tenantId"+"}", url.PathEscape(parameterValueToString(r.tenantId, "tenantId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.requestId == nil {
		return localVarReturnValue, nil, reportError("requestId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "requestId", r.requestId, "", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiModifyTenantSecurityIpGroupRequest struct {
	ctx context.Context
	ApiService *MultiCloudOpenAPIService
	instanceId string
	tenantId string
	requestId *string
	body *McModifyTenantSecurityIpGroupRequest
}

func (r ApiModifyTenantSecurityIpGroupRequest) RequestId(requestId string) ApiModifyTenantSecurityIpGroupRequest {
	r.requestId = &requestId
	return r
}

func (r ApiModifyTenantSecurityIpGroupRequest) Body(body McModifyTenantSecurityIpGroupRequest) ApiModifyTenantSecurityIpGroupRequest {
	r.body = &body
	return r
}

func (r ApiModifyTenantSecurityIpGroupRequest) Execute() (*OBCloudResultMcModifyTenantSecurityIpGroupResponse, *http.Response, error) {
	return r.ApiService.ModifyTenantSecurityIpGroupExecute(r)
}

/*
ModifyTenantSecurityIpGroup ModifyTenantSecurityIpGroup

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceId
 @param tenantId
 @return ApiModifyTenantSecurityIpGroupRequest
*/
func (a *MultiCloudOpenAPIService) ModifyTenantSecurityIpGroup(ctx context.Context, instanceId string, tenantId string) ApiModifyTenantSecurityIpGroupRequest {
	return ApiModifyTenantSecurityIpGroupRequest{
		ApiService: a,
		ctx: ctx,
		instanceId: instanceId,
		tenantId: tenantId,
	}
}

// Execute executes the request
//  @return OBCloudResultMcModifyTenantSecurityIpGroupResponse
func (a *MultiCloudOpenAPIService) ModifyTenantSecurityIpGroupExecute(r ApiModifyTenantSecurityIpGroupRequest) (*OBCloudResultMcModifyTenantSecurityIpGroupResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OBCloudResultMcModifyTenantSecurityIpGroupResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MultiCloudOpenAPIService.ModifyTenantSecurityIpGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/instances/{instanceId}/tenants/{tenantId}/securityIpGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"instanceId"+"}", url.PathEscape(parameterValueToString(r.instanceId, "instanceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tenantId"+"}", url.PathEscape(parameterValueToString(r.tenantId, "tenantId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.requestId == nil {
		return localVarReturnValue, nil, reportError("requestId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "requestId", r.requestId, "", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiModifyTenantUserDescriptionRequest struct {
	ctx context.Context
	ApiService *MultiCloudOpenAPIService
	instanceId string
	tenantId string
	userName string
	requestId *string
	body *ModifyTenantUserDescriptionParamDo
}

func (r ApiModifyTenantUserDescriptionRequest) RequestId(requestId string) ApiModifyTenantUserDescriptionRequest {
	r.requestId = &requestId
	return r
}

func (r ApiModifyTenantUserDescriptionRequest) Body(body ModifyTenantUserDescriptionParamDo) ApiModifyTenantUserDescriptionRequest {
	r.body = &body
	return r
}

func (r ApiModifyTenantUserDescriptionRequest) Execute() (*OBCloudResult, *http.Response, error) {
	return r.ApiService.ModifyTenantUserDescriptionExecute(r)
}

/*
ModifyTenantUserDescription 修改租户内的用户备注信息

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceId
 @param tenantId
 @param userName
 @return ApiModifyTenantUserDescriptionRequest
*/
func (a *MultiCloudOpenAPIService) ModifyTenantUserDescription(ctx context.Context, instanceId string, tenantId string, userName string) ApiModifyTenantUserDescriptionRequest {
	return ApiModifyTenantUserDescriptionRequest{
		ApiService: a,
		ctx: ctx,
		instanceId: instanceId,
		tenantId: tenantId,
		userName: userName,
	}
}

// Execute executes the request
//  @return OBCloudResult
func (a *MultiCloudOpenAPIService) ModifyTenantUserDescriptionExecute(r ApiModifyTenantUserDescriptionRequest) (*OBCloudResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OBCloudResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MultiCloudOpenAPIService.ModifyTenantUserDescription")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/instances/{instanceId}/tenants/{tenantId}/tenantUsers/{userName}/description"
	localVarPath = strings.Replace(localVarPath, "{"+"instanceId"+"}", url.PathEscape(parameterValueToString(r.instanceId, "instanceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tenantId"+"}", url.PathEscape(parameterValueToString(r.tenantId, "tenantId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"userName"+"}", url.PathEscape(parameterValueToString(r.userName, "userName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.requestId == nil {
		return localVarReturnValue, nil, reportError("requestId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "requestId", r.requestId, "", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiModifyTenantUserPasswordRequest struct {
	ctx context.Context
	ApiService *MultiCloudOpenAPIService
	instanceId string
	tenantId string
	userName string
	requestId *string
	body *ModifyUserPasswordParamDo
}

func (r ApiModifyTenantUserPasswordRequest) RequestId(requestId string) ApiModifyTenantUserPasswordRequest {
	r.requestId = &requestId
	return r
}

func (r ApiModifyTenantUserPasswordRequest) Body(body ModifyUserPasswordParamDo) ApiModifyTenantUserPasswordRequest {
	r.body = &body
	return r
}

func (r ApiModifyTenantUserPasswordRequest) Execute() (*OBCloudResult, *http.Response, error) {
	return r.ApiService.ModifyTenantUserPasswordExecute(r)
}

/*
ModifyTenantUserPassword 修改租户内的用户密码

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceId
 @param tenantId
 @param userName
 @return ApiModifyTenantUserPasswordRequest
*/
func (a *MultiCloudOpenAPIService) ModifyTenantUserPassword(ctx context.Context, instanceId string, tenantId string, userName string) ApiModifyTenantUserPasswordRequest {
	return ApiModifyTenantUserPasswordRequest{
		ApiService: a,
		ctx: ctx,
		instanceId: instanceId,
		tenantId: tenantId,
		userName: userName,
	}
}

// Execute executes the request
//  @return OBCloudResult
func (a *MultiCloudOpenAPIService) ModifyTenantUserPasswordExecute(r ApiModifyTenantUserPasswordRequest) (*OBCloudResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OBCloudResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MultiCloudOpenAPIService.ModifyTenantUserPassword")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/instances/{instanceId}/tenants/{tenantId}/tenantUsers/{userName}/password"
	localVarPath = strings.Replace(localVarPath, "{"+"instanceId"+"}", url.PathEscape(parameterValueToString(r.instanceId, "instanceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tenantId"+"}", url.PathEscape(parameterValueToString(r.tenantId, "tenantId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"userName"+"}", url.PathEscape(parameterValueToString(r.userName, "userName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.requestId == nil {
		return localVarReturnValue, nil, reportError("requestId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "requestId", r.requestId, "", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiModifyTenantUserRoleRequest struct {
	ctx context.Context
	ApiService *MultiCloudOpenAPIService
	instanceId string
	tenantId string
	userName string
	body *ModifyUserRolesParamDo
}

func (r ApiModifyTenantUserRoleRequest) Body(body ModifyUserRolesParamDo) ApiModifyTenantUserRoleRequest {
	r.body = &body
	return r
}

func (r ApiModifyTenantUserRoleRequest) Execute() (*OBCloudResult, *http.Response, error) {
	return r.ApiService.ModifyTenantUserRoleExecute(r)
}

/*
ModifyTenantUserRole 修改用户权限

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceId
 @param tenantId
 @param userName
 @return ApiModifyTenantUserRoleRequest
*/
func (a *MultiCloudOpenAPIService) ModifyTenantUserRole(ctx context.Context, instanceId string, tenantId string, userName string) ApiModifyTenantUserRoleRequest {
	return ApiModifyTenantUserRoleRequest{
		ApiService: a,
		ctx: ctx,
		instanceId: instanceId,
		tenantId: tenantId,
		userName: userName,
	}
}

// Execute executes the request
//  @return OBCloudResult
func (a *MultiCloudOpenAPIService) ModifyTenantUserRoleExecute(r ApiModifyTenantUserRoleRequest) (*OBCloudResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OBCloudResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MultiCloudOpenAPIService.ModifyTenantUserRole")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/instances/{instanceId}/tenants/{tenantId}/tenantUsers/{userName}/authorization"
	localVarPath = strings.Replace(localVarPath, "{"+"instanceId"+"}", url.PathEscape(parameterValueToString(r.instanceId, "instanceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tenantId"+"}", url.PathEscape(parameterValueToString(r.tenantId, "tenantId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"userName"+"}", url.PathEscape(parameterValueToString(r.userName, "userName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiModifyTenantUserStatusRequest struct {
	ctx context.Context
	ApiService *MultiCloudOpenAPIService
	instanceId string
	tenantId string
	userName string
	requestId *string
	body *ModifyUserStatusParamDo
}

func (r ApiModifyTenantUserStatusRequest) RequestId(requestId string) ApiModifyTenantUserStatusRequest {
	r.requestId = &requestId
	return r
}

func (r ApiModifyTenantUserStatusRequest) Body(body ModifyUserStatusParamDo) ApiModifyTenantUserStatusRequest {
	r.body = &body
	return r
}

func (r ApiModifyTenantUserStatusRequest) Execute() (*OBCloudResult, *http.Response, error) {
	return r.ApiService.ModifyTenantUserStatusExecute(r)
}

/*
ModifyTenantUserStatus 修改租户内的用户锁定状态

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceId
 @param tenantId
 @param userName
 @return ApiModifyTenantUserStatusRequest
*/
func (a *MultiCloudOpenAPIService) ModifyTenantUserStatus(ctx context.Context, instanceId string, tenantId string, userName string) ApiModifyTenantUserStatusRequest {
	return ApiModifyTenantUserStatusRequest{
		ApiService: a,
		ctx: ctx,
		instanceId: instanceId,
		tenantId: tenantId,
		userName: userName,
	}
}

// Execute executes the request
//  @return OBCloudResult
func (a *MultiCloudOpenAPIService) ModifyTenantUserStatusExecute(r ApiModifyTenantUserStatusRequest) (*OBCloudResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OBCloudResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MultiCloudOpenAPIService.ModifyTenantUserStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/instances/{instanceId}/tenants/{tenantId}/tenantUsers/{userName}/status"
	localVarPath = strings.Replace(localVarPath, "{"+"instanceId"+"}", url.PathEscape(parameterValueToString(r.instanceId, "instanceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tenantId"+"}", url.PathEscape(parameterValueToString(r.tenantId, "tenantId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"userName"+"}", url.PathEscape(parameterValueToString(r.userName, "userName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.requestId == nil {
		return localVarReturnValue, nil, reportError("requestId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "requestId", r.requestId, "", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiQueryTenantsRequest struct {
	ctx context.Context
	ApiService *MultiCloudOpenAPIService
	instanceId string
	requestId *string
	pageNumber *int32
	pageSize *int32
	tenantName *string
	tagList *string
}

func (r ApiQueryTenantsRequest) RequestId(requestId string) ApiQueryTenantsRequest {
	r.requestId = &requestId
	return r
}

func (r ApiQueryTenantsRequest) PageNumber(pageNumber int32) ApiQueryTenantsRequest {
	r.pageNumber = &pageNumber
	return r
}

func (r ApiQueryTenantsRequest) PageSize(pageSize int32) ApiQueryTenantsRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiQueryTenantsRequest) TenantName(tenantName string) ApiQueryTenantsRequest {
	r.tenantName = &tenantName
	return r
}

func (r ApiQueryTenantsRequest) TagList(tagList string) ApiQueryTenantsRequest {
	r.tagList = &tagList
	return r
}

func (r ApiQueryTenantsRequest) Execute() (*OBCloudResultOBCloudPagingDataTenantDTO, *http.Response, error) {
	return r.ApiService.QueryTenantsExecute(r)
}

/*
QueryTenants 条件查询租户

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceId
 @return ApiQueryTenantsRequest
*/
func (a *MultiCloudOpenAPIService) QueryTenants(ctx context.Context, instanceId string) ApiQueryTenantsRequest {
	return ApiQueryTenantsRequest{
		ApiService: a,
		ctx: ctx,
		instanceId: instanceId,
	}
}

// Execute executes the request
//  @return OBCloudResultOBCloudPagingDataTenantDTO
func (a *MultiCloudOpenAPIService) QueryTenantsExecute(r ApiQueryTenantsRequest) (*OBCloudResultOBCloudPagingDataTenantDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OBCloudResultOBCloudPagingDataTenantDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MultiCloudOpenAPIService.QueryTenants")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/instances/{instanceId}/tenants"
	localVarPath = strings.Replace(localVarPath, "{"+"instanceId"+"}", url.PathEscape(parameterValueToString(r.instanceId, "instanceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.requestId == nil {
		return localVarReturnValue, nil, reportError("requestId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "requestId", r.requestId, "", "")
	if r.pageNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageNumber", r.pageNumber, "", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "", "")
	}
	if r.tenantName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tenantName", r.tenantName, "", "")
	}
	if r.tagList != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tagList", r.tagList, "", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiStartClusterRequest struct {
	ctx context.Context
	ApiService *MultiCloudOpenAPIService
	instanceId string
	requestId *string
}

func (r ApiStartClusterRequest) RequestId(requestId string) ApiStartClusterRequest {
	r.requestId = &requestId
	return r
}

func (r ApiStartClusterRequest) Execute() (*OBCloudResultString, *http.Response, error) {
	return r.ApiService.StartClusterExecute(r)
}

/*
StartCluster StartCluster

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceId
 @return ApiStartClusterRequest
*/
func (a *MultiCloudOpenAPIService) StartCluster(ctx context.Context, instanceId string) ApiStartClusterRequest {
	return ApiStartClusterRequest{
		ApiService: a,
		ctx: ctx,
		instanceId: instanceId,
	}
}

// Execute executes the request
//  @return OBCloudResultString
func (a *MultiCloudOpenAPIService) StartClusterExecute(r ApiStartClusterRequest) (*OBCloudResultString, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OBCloudResultString
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MultiCloudOpenAPIService.StartCluster")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/instances/{instanceId}/startCluster"
	localVarPath = strings.Replace(localVarPath, "{"+"instanceId"+"}", url.PathEscape(parameterValueToString(r.instanceId, "instanceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.requestId == nil {
		return localVarReturnValue, nil, reportError("requestId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "requestId", r.requestId, "", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiStopClusterRequest struct {
	ctx context.Context
	ApiService *MultiCloudOpenAPIService
	instanceId string
	requestId *string
}

func (r ApiStopClusterRequest) RequestId(requestId string) ApiStopClusterRequest {
	r.requestId = &requestId
	return r
}

func (r ApiStopClusterRequest) Execute() (*OBCloudResultString, *http.Response, error) {
	return r.ApiService.StopClusterExecute(r)
}

/*
StopCluster StopCluster

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceId
 @return ApiStopClusterRequest
*/
func (a *MultiCloudOpenAPIService) StopCluster(ctx context.Context, instanceId string) ApiStopClusterRequest {
	return ApiStopClusterRequest{
		ApiService: a,
		ctx: ctx,
		instanceId: instanceId,
	}
}

// Execute executes the request
//  @return OBCloudResultString
func (a *MultiCloudOpenAPIService) StopClusterExecute(r ApiStopClusterRequest) (*OBCloudResultString, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OBCloudResultString
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MultiCloudOpenAPIService.StopCluster")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/instances/{instanceId}/stopCluster"
	localVarPath = strings.Replace(localVarPath, "{"+"instanceId"+"}", url.PathEscape(parameterValueToString(r.instanceId, "instanceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.requestId == nil {
		return localVarReturnValue, nil, reportError("requestId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "requestId", r.requestId, "", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdatePrivatelinkInformationRequest struct {
	ctx context.Context
	ApiService *MultiCloudOpenAPIService
	instanceId string
	tenantId string
	requestId *string
	body *UpdateTenantPrivatelinkInformationRequest
}

func (r ApiUpdatePrivatelinkInformationRequest) RequestId(requestId string) ApiUpdatePrivatelinkInformationRequest {
	r.requestId = &requestId
	return r
}

func (r ApiUpdatePrivatelinkInformationRequest) Body(body UpdateTenantPrivatelinkInformationRequest) ApiUpdatePrivatelinkInformationRequest {
	r.body = &body
	return r
}

func (r ApiUpdatePrivatelinkInformationRequest) Execute() (*OBCloudResultUpdateTenantPrivatelinkInformationResponse, *http.Response, error) {
	return r.ApiService.UpdatePrivatelinkInformationExecute(r)
}

/*
UpdatePrivatelinkInformation 更新租户private link信息

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceId
 @param tenantId
 @return ApiUpdatePrivatelinkInformationRequest
*/
func (a *MultiCloudOpenAPIService) UpdatePrivatelinkInformation(ctx context.Context, instanceId string, tenantId string) ApiUpdatePrivatelinkInformationRequest {
	return ApiUpdatePrivatelinkInformationRequest{
		ApiService: a,
		ctx: ctx,
		instanceId: instanceId,
		tenantId: tenantId,
	}
}

// Execute executes the request
//  @return OBCloudResultUpdateTenantPrivatelinkInformationResponse
func (a *MultiCloudOpenAPIService) UpdatePrivatelinkInformationExecute(r ApiUpdatePrivatelinkInformationRequest) (*OBCloudResultUpdateTenantPrivatelinkInformationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OBCloudResultUpdateTenantPrivatelinkInformationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MultiCloudOpenAPIService.UpdatePrivatelinkInformation")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/instances/{instanceId}/tenants/{tenantId}/privatelink/information"
	localVarPath = strings.Replace(localVarPath, "{"+"instanceId"+"}", url.PathEscape(parameterValueToString(r.instanceId, "instanceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tenantId"+"}", url.PathEscape(parameterValueToString(r.tenantId, "tenantId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.requestId == nil {
		return localVarReturnValue, nil, reportError("requestId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "requestId", r.requestId, "", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateTenantRequest struct {
	ctx context.Context
	ApiService *MultiCloudOpenAPIService
	instanceId string
	tenantId string
	requestId *string
	body *UpdateTenantRequest
}

func (r ApiUpdateTenantRequest) RequestId(requestId string) ApiUpdateTenantRequest {
	r.requestId = &requestId
	return r
}

func (r ApiUpdateTenantRequest) Body(body UpdateTenantRequest) ApiUpdateTenantRequest {
	r.body = &body
	return r
}

func (r ApiUpdateTenantRequest) Execute() (*OBCloudResultSimpleTenantResponse, *http.Response, error) {
	return r.ApiService.UpdateTenantExecute(r)
}

/*
UpdateTenant 修改租户

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceId
 @param tenantId
 @return ApiUpdateTenantRequest
*/
func (a *MultiCloudOpenAPIService) UpdateTenant(ctx context.Context, instanceId string, tenantId string) ApiUpdateTenantRequest {
	return ApiUpdateTenantRequest{
		ApiService: a,
		ctx: ctx,
		instanceId: instanceId,
		tenantId: tenantId,
	}
}

// Execute executes the request
//  @return OBCloudResultSimpleTenantResponse
func (a *MultiCloudOpenAPIService) UpdateTenantExecute(r ApiUpdateTenantRequest) (*OBCloudResultSimpleTenantResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OBCloudResultSimpleTenantResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MultiCloudOpenAPIService.UpdateTenant")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/instances/{instanceId}/tenants/{tenantId}"
	localVarPath = strings.Replace(localVarPath, "{"+"instanceId"+"}", url.PathEscape(parameterValueToString(r.instanceId, "instanceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tenantId"+"}", url.PathEscape(parameterValueToString(r.tenantId, "tenantId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.requestId == nil {
		return localVarReturnValue, nil, reportError("requestId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "requestId", r.requestId, "", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
