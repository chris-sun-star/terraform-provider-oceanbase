/*
OceanBase Cloud API

API Documentation for OceanBase Cloud

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package obcloudsdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MultiCloudModifyInstanceNodeNumRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MultiCloudModifyInstanceNodeNumRequest{}

// MultiCloudModifyInstanceNodeNumRequest struct for MultiCloudModifyInstanceNodeNumRequest
type MultiCloudModifyInstanceNodeNumRequest struct {
	NodeNum int32 `json:"nodeNum"`
	DryRun *bool `json:"dryRun,omitempty"`
}

type _MultiCloudModifyInstanceNodeNumRequest MultiCloudModifyInstanceNodeNumRequest

// NewMultiCloudModifyInstanceNodeNumRequest instantiates a new MultiCloudModifyInstanceNodeNumRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMultiCloudModifyInstanceNodeNumRequest(nodeNum int32) *MultiCloudModifyInstanceNodeNumRequest {
	this := MultiCloudModifyInstanceNodeNumRequest{}
	this.NodeNum = nodeNum
	return &this
}

// NewMultiCloudModifyInstanceNodeNumRequestWithDefaults instantiates a new MultiCloudModifyInstanceNodeNumRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMultiCloudModifyInstanceNodeNumRequestWithDefaults() *MultiCloudModifyInstanceNodeNumRequest {
	this := MultiCloudModifyInstanceNodeNumRequest{}
	return &this
}

// GetNodeNum returns the NodeNum field value
func (o *MultiCloudModifyInstanceNodeNumRequest) GetNodeNum() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NodeNum
}

// GetNodeNumOk returns a tuple with the NodeNum field value
// and a boolean to check if the value has been set.
func (o *MultiCloudModifyInstanceNodeNumRequest) GetNodeNumOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NodeNum, true
}

// SetNodeNum sets field value
func (o *MultiCloudModifyInstanceNodeNumRequest) SetNodeNum(v int32) {
	o.NodeNum = v
}

// GetDryRun returns the DryRun field value if set, zero value otherwise.
func (o *MultiCloudModifyInstanceNodeNumRequest) GetDryRun() bool {
	if o == nil || IsNil(o.DryRun) {
		var ret bool
		return ret
	}
	return *o.DryRun
}

// GetDryRunOk returns a tuple with the DryRun field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiCloudModifyInstanceNodeNumRequest) GetDryRunOk() (*bool, bool) {
	if o == nil || IsNil(o.DryRun) {
		return nil, false
	}
	return o.DryRun, true
}

// HasDryRun returns a boolean if a field has been set.
func (o *MultiCloudModifyInstanceNodeNumRequest) HasDryRun() bool {
	if o != nil && !IsNil(o.DryRun) {
		return true
	}

	return false
}

// SetDryRun gets a reference to the given bool and assigns it to the DryRun field.
func (o *MultiCloudModifyInstanceNodeNumRequest) SetDryRun(v bool) {
	o.DryRun = &v
}

func (o MultiCloudModifyInstanceNodeNumRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MultiCloudModifyInstanceNodeNumRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["nodeNum"] = o.NodeNum
	if !IsNil(o.DryRun) {
		toSerialize["dryRun"] = o.DryRun
	}
	return toSerialize, nil
}

func (o *MultiCloudModifyInstanceNodeNumRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"nodeNum",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMultiCloudModifyInstanceNodeNumRequest := _MultiCloudModifyInstanceNodeNumRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMultiCloudModifyInstanceNodeNumRequest)

	if err != nil {
		return err
	}

	*o = MultiCloudModifyInstanceNodeNumRequest(varMultiCloudModifyInstanceNodeNumRequest)

	return err
}

type NullableMultiCloudModifyInstanceNodeNumRequest struct {
	value *MultiCloudModifyInstanceNodeNumRequest
	isSet bool
}

func (v NullableMultiCloudModifyInstanceNodeNumRequest) Get() *MultiCloudModifyInstanceNodeNumRequest {
	return v.value
}

func (v *NullableMultiCloudModifyInstanceNodeNumRequest) Set(val *MultiCloudModifyInstanceNodeNumRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableMultiCloudModifyInstanceNodeNumRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableMultiCloudModifyInstanceNodeNumRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMultiCloudModifyInstanceNodeNumRequest(val *MultiCloudModifyInstanceNodeNumRequest) *NullableMultiCloudModifyInstanceNodeNumRequest {
	return &NullableMultiCloudModifyInstanceNodeNumRequest{value: val, isSet: true}
}

func (v NullableMultiCloudModifyInstanceNodeNumRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMultiCloudModifyInstanceNodeNumRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


