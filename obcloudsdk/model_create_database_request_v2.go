/*
OceanBase Cloud API

API Documentation for OceanBase Cloud

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package obcloudsdk

import (
	"encoding/json"
)

// checks if the CreateDatabaseRequestV2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateDatabaseRequestV2{}

// CreateDatabaseRequestV2 struct for CreateDatabaseRequestV2
type CreateDatabaseRequestV2 struct {
	InstanceId *string `json:"instanceId,omitempty"`
	TenantId *string `json:"tenantId,omitempty"`
	DatabaseName *string `json:"databaseName,omitempty"`
	Encoding *string `json:"encoding,omitempty"`
	Description *string `json:"description,omitempty"`
	RequestId *string `json:"requestId,omitempty"`
}

// NewCreateDatabaseRequestV2 instantiates a new CreateDatabaseRequestV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateDatabaseRequestV2() *CreateDatabaseRequestV2 {
	this := CreateDatabaseRequestV2{}
	return &this
}

// NewCreateDatabaseRequestV2WithDefaults instantiates a new CreateDatabaseRequestV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateDatabaseRequestV2WithDefaults() *CreateDatabaseRequestV2 {
	this := CreateDatabaseRequestV2{}
	return &this
}

// GetInstanceId returns the InstanceId field value if set, zero value otherwise.
func (o *CreateDatabaseRequestV2) GetInstanceId() string {
	if o == nil || IsNil(o.InstanceId) {
		var ret string
		return ret
	}
	return *o.InstanceId
}

// GetInstanceIdOk returns a tuple with the InstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDatabaseRequestV2) GetInstanceIdOk() (*string, bool) {
	if o == nil || IsNil(o.InstanceId) {
		return nil, false
	}
	return o.InstanceId, true
}

// HasInstanceId returns a boolean if a field has been set.
func (o *CreateDatabaseRequestV2) HasInstanceId() bool {
	if o != nil && !IsNil(o.InstanceId) {
		return true
	}

	return false
}

// SetInstanceId gets a reference to the given string and assigns it to the InstanceId field.
func (o *CreateDatabaseRequestV2) SetInstanceId(v string) {
	o.InstanceId = &v
}

// GetTenantId returns the TenantId field value if set, zero value otherwise.
func (o *CreateDatabaseRequestV2) GetTenantId() string {
	if o == nil || IsNil(o.TenantId) {
		var ret string
		return ret
	}
	return *o.TenantId
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDatabaseRequestV2) GetTenantIdOk() (*string, bool) {
	if o == nil || IsNil(o.TenantId) {
		return nil, false
	}
	return o.TenantId, true
}

// HasTenantId returns a boolean if a field has been set.
func (o *CreateDatabaseRequestV2) HasTenantId() bool {
	if o != nil && !IsNil(o.TenantId) {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given string and assigns it to the TenantId field.
func (o *CreateDatabaseRequestV2) SetTenantId(v string) {
	o.TenantId = &v
}

// GetDatabaseName returns the DatabaseName field value if set, zero value otherwise.
func (o *CreateDatabaseRequestV2) GetDatabaseName() string {
	if o == nil || IsNil(o.DatabaseName) {
		var ret string
		return ret
	}
	return *o.DatabaseName
}

// GetDatabaseNameOk returns a tuple with the DatabaseName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDatabaseRequestV2) GetDatabaseNameOk() (*string, bool) {
	if o == nil || IsNil(o.DatabaseName) {
		return nil, false
	}
	return o.DatabaseName, true
}

// HasDatabaseName returns a boolean if a field has been set.
func (o *CreateDatabaseRequestV2) HasDatabaseName() bool {
	if o != nil && !IsNil(o.DatabaseName) {
		return true
	}

	return false
}

// SetDatabaseName gets a reference to the given string and assigns it to the DatabaseName field.
func (o *CreateDatabaseRequestV2) SetDatabaseName(v string) {
	o.DatabaseName = &v
}

// GetEncoding returns the Encoding field value if set, zero value otherwise.
func (o *CreateDatabaseRequestV2) GetEncoding() string {
	if o == nil || IsNil(o.Encoding) {
		var ret string
		return ret
	}
	return *o.Encoding
}

// GetEncodingOk returns a tuple with the Encoding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDatabaseRequestV2) GetEncodingOk() (*string, bool) {
	if o == nil || IsNil(o.Encoding) {
		return nil, false
	}
	return o.Encoding, true
}

// HasEncoding returns a boolean if a field has been set.
func (o *CreateDatabaseRequestV2) HasEncoding() bool {
	if o != nil && !IsNil(o.Encoding) {
		return true
	}

	return false
}

// SetEncoding gets a reference to the given string and assigns it to the Encoding field.
func (o *CreateDatabaseRequestV2) SetEncoding(v string) {
	o.Encoding = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CreateDatabaseRequestV2) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDatabaseRequestV2) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CreateDatabaseRequestV2) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CreateDatabaseRequestV2) SetDescription(v string) {
	o.Description = &v
}

// GetRequestId returns the RequestId field value if set, zero value otherwise.
func (o *CreateDatabaseRequestV2) GetRequestId() string {
	if o == nil || IsNil(o.RequestId) {
		var ret string
		return ret
	}
	return *o.RequestId
}

// GetRequestIdOk returns a tuple with the RequestId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDatabaseRequestV2) GetRequestIdOk() (*string, bool) {
	if o == nil || IsNil(o.RequestId) {
		return nil, false
	}
	return o.RequestId, true
}

// HasRequestId returns a boolean if a field has been set.
func (o *CreateDatabaseRequestV2) HasRequestId() bool {
	if o != nil && !IsNil(o.RequestId) {
		return true
	}

	return false
}

// SetRequestId gets a reference to the given string and assigns it to the RequestId field.
func (o *CreateDatabaseRequestV2) SetRequestId(v string) {
	o.RequestId = &v
}

func (o CreateDatabaseRequestV2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateDatabaseRequestV2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.InstanceId) {
		toSerialize["instanceId"] = o.InstanceId
	}
	if !IsNil(o.TenantId) {
		toSerialize["tenantId"] = o.TenantId
	}
	if !IsNil(o.DatabaseName) {
		toSerialize["databaseName"] = o.DatabaseName
	}
	if !IsNil(o.Encoding) {
		toSerialize["encoding"] = o.Encoding
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.RequestId) {
		toSerialize["requestId"] = o.RequestId
	}
	return toSerialize, nil
}

type NullableCreateDatabaseRequestV2 struct {
	value *CreateDatabaseRequestV2
	isSet bool
}

func (v NullableCreateDatabaseRequestV2) Get() *CreateDatabaseRequestV2 {
	return v.value
}

func (v *NullableCreateDatabaseRequestV2) Set(val *CreateDatabaseRequestV2) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateDatabaseRequestV2) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateDatabaseRequestV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateDatabaseRequestV2(val *CreateDatabaseRequestV2) *NullableCreateDatabaseRequestV2 {
	return &NullableCreateDatabaseRequestV2{value: val, isSet: true}
}

func (v NullableCreateDatabaseRequestV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateDatabaseRequestV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


