/*
OceanBase Cloud API

API Documentation for OceanBase Cloud

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package obcloudsdk

import (
	"encoding/json"
)

// checks if the OcpUserRoleDo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OcpUserRoleDo{}

// OcpUserRoleDo struct for OcpUserRoleDo
type OcpUserRoleDo struct {
	UserName *string `json:"userName,omitempty"`
	Role *string `json:"role,omitempty"`
	UserType *string `json:"userType,omitempty"`
}

// NewOcpUserRoleDo instantiates a new OcpUserRoleDo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOcpUserRoleDo() *OcpUserRoleDo {
	this := OcpUserRoleDo{}
	return &this
}

// NewOcpUserRoleDoWithDefaults instantiates a new OcpUserRoleDo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOcpUserRoleDoWithDefaults() *OcpUserRoleDo {
	this := OcpUserRoleDo{}
	return &this
}

// GetUserName returns the UserName field value if set, zero value otherwise.
func (o *OcpUserRoleDo) GetUserName() string {
	if o == nil || IsNil(o.UserName) {
		var ret string
		return ret
	}
	return *o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OcpUserRoleDo) GetUserNameOk() (*string, bool) {
	if o == nil || IsNil(o.UserName) {
		return nil, false
	}
	return o.UserName, true
}

// HasUserName returns a boolean if a field has been set.
func (o *OcpUserRoleDo) HasUserName() bool {
	if o != nil && !IsNil(o.UserName) {
		return true
	}

	return false
}

// SetUserName gets a reference to the given string and assigns it to the UserName field.
func (o *OcpUserRoleDo) SetUserName(v string) {
	o.UserName = &v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *OcpUserRoleDo) GetRole() string {
	if o == nil || IsNil(o.Role) {
		var ret string
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OcpUserRoleDo) GetRoleOk() (*string, bool) {
	if o == nil || IsNil(o.Role) {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *OcpUserRoleDo) HasRole() bool {
	if o != nil && !IsNil(o.Role) {
		return true
	}

	return false
}

// SetRole gets a reference to the given string and assigns it to the Role field.
func (o *OcpUserRoleDo) SetRole(v string) {
	o.Role = &v
}

// GetUserType returns the UserType field value if set, zero value otherwise.
func (o *OcpUserRoleDo) GetUserType() string {
	if o == nil || IsNil(o.UserType) {
		var ret string
		return ret
	}
	return *o.UserType
}

// GetUserTypeOk returns a tuple with the UserType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OcpUserRoleDo) GetUserTypeOk() (*string, bool) {
	if o == nil || IsNil(o.UserType) {
		return nil, false
	}
	return o.UserType, true
}

// HasUserType returns a boolean if a field has been set.
func (o *OcpUserRoleDo) HasUserType() bool {
	if o != nil && !IsNil(o.UserType) {
		return true
	}

	return false
}

// SetUserType gets a reference to the given string and assigns it to the UserType field.
func (o *OcpUserRoleDo) SetUserType(v string) {
	o.UserType = &v
}

func (o OcpUserRoleDo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OcpUserRoleDo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UserName) {
		toSerialize["userName"] = o.UserName
	}
	if !IsNil(o.Role) {
		toSerialize["role"] = o.Role
	}
	if !IsNil(o.UserType) {
		toSerialize["userType"] = o.UserType
	}
	return toSerialize, nil
}

type NullableOcpUserRoleDo struct {
	value *OcpUserRoleDo
	isSet bool
}

func (v NullableOcpUserRoleDo) Get() *OcpUserRoleDo {
	return v.value
}

func (v *NullableOcpUserRoleDo) Set(val *OcpUserRoleDo) {
	v.value = val
	v.isSet = true
}

func (v NullableOcpUserRoleDo) IsSet() bool {
	return v.isSet
}

func (v *NullableOcpUserRoleDo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOcpUserRoleDo(val *OcpUserRoleDo) *NullableOcpUserRoleDo {
	return &NullableOcpUserRoleDo{value: val, isSet: true}
}

func (v NullableOcpUserRoleDo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOcpUserRoleDo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


