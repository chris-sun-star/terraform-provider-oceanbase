/*
OceanBase Cloud API

API Documentation for OceanBase Cloud

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package obcloudsdk

import (
	"encoding/json"
)

// checks if the McDeleteTenantSecurityIpGroupRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &McDeleteTenantSecurityIpGroupRequest{}

// McDeleteTenantSecurityIpGroupRequest struct for McDeleteTenantSecurityIpGroupRequest
type McDeleteTenantSecurityIpGroupRequest struct {
	SecurityIpGroupName *string `json:"securityIpGroupName,omitempty"`
}

// NewMcDeleteTenantSecurityIpGroupRequest instantiates a new McDeleteTenantSecurityIpGroupRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMcDeleteTenantSecurityIpGroupRequest() *McDeleteTenantSecurityIpGroupRequest {
	this := McDeleteTenantSecurityIpGroupRequest{}
	return &this
}

// NewMcDeleteTenantSecurityIpGroupRequestWithDefaults instantiates a new McDeleteTenantSecurityIpGroupRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMcDeleteTenantSecurityIpGroupRequestWithDefaults() *McDeleteTenantSecurityIpGroupRequest {
	this := McDeleteTenantSecurityIpGroupRequest{}
	return &this
}

// GetSecurityIpGroupName returns the SecurityIpGroupName field value if set, zero value otherwise.
func (o *McDeleteTenantSecurityIpGroupRequest) GetSecurityIpGroupName() string {
	if o == nil || IsNil(o.SecurityIpGroupName) {
		var ret string
		return ret
	}
	return *o.SecurityIpGroupName
}

// GetSecurityIpGroupNameOk returns a tuple with the SecurityIpGroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *McDeleteTenantSecurityIpGroupRequest) GetSecurityIpGroupNameOk() (*string, bool) {
	if o == nil || IsNil(o.SecurityIpGroupName) {
		return nil, false
	}
	return o.SecurityIpGroupName, true
}

// HasSecurityIpGroupName returns a boolean if a field has been set.
func (o *McDeleteTenantSecurityIpGroupRequest) HasSecurityIpGroupName() bool {
	if o != nil && !IsNil(o.SecurityIpGroupName) {
		return true
	}

	return false
}

// SetSecurityIpGroupName gets a reference to the given string and assigns it to the SecurityIpGroupName field.
func (o *McDeleteTenantSecurityIpGroupRequest) SetSecurityIpGroupName(v string) {
	o.SecurityIpGroupName = &v
}

func (o McDeleteTenantSecurityIpGroupRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o McDeleteTenantSecurityIpGroupRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SecurityIpGroupName) {
		toSerialize["securityIpGroupName"] = o.SecurityIpGroupName
	}
	return toSerialize, nil
}

type NullableMcDeleteTenantSecurityIpGroupRequest struct {
	value *McDeleteTenantSecurityIpGroupRequest
	isSet bool
}

func (v NullableMcDeleteTenantSecurityIpGroupRequest) Get() *McDeleteTenantSecurityIpGroupRequest {
	return v.value
}

func (v *NullableMcDeleteTenantSecurityIpGroupRequest) Set(val *McDeleteTenantSecurityIpGroupRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableMcDeleteTenantSecurityIpGroupRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableMcDeleteTenantSecurityIpGroupRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMcDeleteTenantSecurityIpGroupRequest(val *McDeleteTenantSecurityIpGroupRequest) *NullableMcDeleteTenantSecurityIpGroupRequest {
	return &NullableMcDeleteTenantSecurityIpGroupRequest{value: val, isSet: true}
}

func (v NullableMcDeleteTenantSecurityIpGroupRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMcDeleteTenantSecurityIpGroupRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


